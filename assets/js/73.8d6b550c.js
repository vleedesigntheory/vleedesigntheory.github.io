(window.webpackJsonp=window.webpackJsonp||[]).push([[73],{276:function(n,t,e){"use strict";e.r(t);var i=e(0),s=Object(i.a)({},(function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"基于el-slider自定义range组件封装实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于el-slider自定义range组件封装实践"}},[n._v("#")]),n._v(" 基于el-slider自定义range组件封装实践")]),n._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[n._v("#")]),n._v(" 前言")]),n._v(" "),e("p",[n._v("日常工作中经常使用范围选择组件，例如进度条、日期范围选择等组件，常见组件库中经常使用的都是使用的圆形滑块形状，项目中有需要根据自定义去实现一个range组件，以下是基于element的el-slider组件进行改良封装的一个range组件。")]),n._v(" "),e("p",[e("img",{attrs:{src:"/tech/front/range20200613/range01.png",alt:"图片"}})]),n._v(" "),e("h2",{attrs:{id:"问题目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题目录"}},[n._v("#")]),n._v(" 问题目录")]),n._v(" "),e("ul",[e("li",[n._v("el-slider源码解读")]),n._v(" "),e("li",[n._v("自定义封装")]),n._v(" "),e("li",[n._v("封装range组件常见方法")])]),n._v(" "),e("h2",{attrs:{id:"探索案例"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#探索案例"}},[n._v("#")]),n._v(" 探索案例")]),n._v(" "),e("h3",{attrs:{id:"el-slider源码解读"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#el-slider源码解读"}},[n._v("#")]),n._v(" el-slider源码解读")]),n._v(" "),e("p",[e("img",{attrs:{src:"/tech/front/range20200613/range02.jpg",alt:"图片"}})]),n._v(" "),e("p",[n._v("[组件目录]")]),n._v(" "),e("ul",[e("li",[n._v("src\n"),e("ul",[e("li",[n._v("button.vue")]),n._v(" "),e("li",[n._v("main.vue")]),n._v(" "),e("li",[n._v("marker.js")])])]),n._v(" "),e("li",[n._v("index.js")])]),n._v(" "),e("p",[n._v("[目录描述] button主要是滑块的大小、样式，拖拽行为等方法的主体；main主要是进度条的显示")]),n._v(" "),e("p",[n._v("[源码分析] el-slider的主体是button和bar，在button上主要需要考虑的是事件相关的处理，其中包括mouseenter、mouseleave、mousemove、mouseup、mousedown、touchstart、touchuend、touchmove、keydown.left/right/down/up；bar上主要考虑的就是值的获取与位置的显示")]),n._v(" "),e("p",[n._v("button源码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n  <div\n    class="el-slider__button-wrapper"\n    @mouseenter="handleMouseEnter"\n    @mouseleave="handleMouseLeave"\n    @mousedown="onButtonDown"\n    @touchstart="onButtonDown"\n    :class="{ \'hover\': hovering, \'dragging\': dragging }"\n    :style="wrapperStyle"\n    ref="button"\n    tabindex="0"\n    @focus="handleMouseEnter"\n    @blur="handleMouseLeave"\n    @keydown.left="onLeftKeyDown"\n    @keydown.right="onRightKeyDown"\n    @keydown.down.prevent="onLeftKeyDown"\n    @keydown.up.prevent="onRightKeyDown"\n  >\n    <el-tooltip\n      placement="top"\n      ref="tooltip"\n      :popper-class="tooltipClass"\n      :disabled="!showTooltip">\n      <span slot="content">{{ formatValue }}</span>\n      <div class="el-slider__button" :class="{ \'hover\': hovering, \'dragging\': dragging }"></div>\n    </el-tooltip>\n  </div>\n</template>\n\n<script>\n  import ElTooltip from \'element-ui/packages/tooltip\';\n\n  export default {\n    name: \'ElSliderButton\',\n\n    components: {\n      ElTooltip\n    },\n\n    props: {\n      value: {\n        type: Number,\n        default: 0\n      },\n      vertical: {\n        type: Boolean,\n        default: false\n      },\n      tooltipClass: String\n    },\n\n    data() {\n      return {\n        hovering: false,\n        dragging: false,\n        isClick: false,\n        startX: 0,\n        currentX: 0,\n        startY: 0,\n        currentY: 0,\n        startPosition: 0,\n        newPosition: null,\n        oldValue: this.value\n      };\n    },\n\n    computed: {\n      disabled() {\n        return this.$parent.sliderDisabled;\n      },\n\n      max() {\n        return this.$parent.max;\n      },\n\n      min() {\n        return this.$parent.min;\n      },\n\n      step() {\n        return this.$parent.step;\n      },\n\n      showTooltip() {\n        return this.$parent.showTooltip;\n      },\n\n      precision() {\n        return this.$parent.precision;\n      },\n\n      currentPosition() {\n        return `${ (this.value - this.min) / (this.max - this.min) * 100 }%`;\n      },\n\n      enableFormat() {\n        return this.$parent.formatTooltip instanceof Function;\n      },\n\n      formatValue() {\n        return this.enableFormat && this.$parent.formatTooltip(this.value) || this.value;\n      },\n\n      wrapperStyle() {\n        return this.vertical ? { bottom: this.currentPosition } : { left: this.currentPosition };\n      }\n    },\n\n    watch: {\n      dragging(val) {\n        this.$parent.dragging = val;\n      }\n    },\n\n    methods: {\n      displayTooltip() {\n        this.$refs.tooltip && (this.$refs.tooltip.showPopper = true);\n      },\n\n      hideTooltip() {\n        this.$refs.tooltip && (this.$refs.tooltip.showPopper = false);\n      },\n\n      handleMouseEnter() {\n        this.hovering = true;\n        this.displayTooltip();\n      },\n\n      handleMouseLeave() {\n        this.hovering = false;\n        this.hideTooltip();\n      },\n\n      onButtonDown(event) {\n        if (this.disabled) return;\n        event.preventDefault();\n        this.onDragStart(event);\n        window.addEventListener(\'mousemove\', this.onDragging);\n        window.addEventListener(\'touchmove\', this.onDragging);\n        window.addEventListener(\'mouseup\', this.onDragEnd);\n        window.addEventListener(\'touchend\', this.onDragEnd);\n        window.addEventListener(\'contextmenu\', this.onDragEnd);\n      },\n      onLeftKeyDown() {\n        if (this.disabled) return;\n        this.newPosition = parseFloat(this.currentPosition) - this.step / (this.max - this.min) * 100;\n        this.setPosition(this.newPosition);\n        this.$parent.emitChange();\n      },\n      onRightKeyDown() {\n        if (this.disabled) return;\n        this.newPosition = parseFloat(this.currentPosition) + this.step / (this.max - this.min) * 100;\n        this.setPosition(this.newPosition);\n        this.$parent.emitChange();\n      },\n      onDragStart(event) {\n        this.dragging = true;\n        this.isClick = true;\n        if (event.type === \'touchstart\') {\n          event.clientY = event.touches[0].clientY;\n          event.clientX = event.touches[0].clientX;\n        }\n        if (this.vertical) {\n          this.startY = event.clientY;\n        } else {\n          this.startX = event.clientX;\n        }\n        this.startPosition = parseFloat(this.currentPosition);\n        this.newPosition = this.startPosition;\n      },\n\n      onDragging(event) {\n        if (this.dragging) {\n          this.isClick = false;\n          this.displayTooltip();\n          this.$parent.resetSize();\n          let diff = 0;\n          if (event.type === \'touchmove\') {\n            event.clientY = event.touches[0].clientY;\n            event.clientX = event.touches[0].clientX;\n          }\n          if (this.vertical) {\n            this.currentY = event.clientY;\n            diff = (this.startY - this.currentY) / this.$parent.sliderSize * 100;\n          } else {\n            this.currentX = event.clientX;\n            diff = (this.currentX - this.startX) / this.$parent.sliderSize * 100;\n          }\n          this.newPosition = this.startPosition + diff;\n          this.setPosition(this.newPosition);\n        }\n      },\n\n      onDragEnd() {\n        if (this.dragging) {\n          /*\n           * 防止在 mouseup 后立即触发 click，导致滑块有几率产生一小段位移\n           * 不使用 preventDefault 是因为 mouseup 和 click 没有注册在同一个 DOM 上\n           */\n          setTimeout(() => {\n            this.dragging = false;\n            this.hideTooltip();\n            if (!this.isClick) {\n              this.setPosition(this.newPosition);\n              this.$parent.emitChange();\n            }\n          }, 0);\n          window.removeEventListener(\'mousemove\', this.onDragging);\n          window.removeEventListener(\'touchmove\', this.onDragging);\n          window.removeEventListener(\'mouseup\', this.onDragEnd);\n          window.removeEventListener(\'touchend\', this.onDragEnd);\n          window.removeEventListener(\'contextmenu\', this.onDragEnd);\n        }\n      },\n\n      setPosition(newPosition) {\n        if (newPosition === null || isNaN(newPosition)) return;\n        if (newPosition < 0) {\n          newPosition = 0;\n        } else if (newPosition > 100) {\n          newPosition = 100;\n        }\n        const lengthPerStep = 100 / ((this.max - this.min) / this.step);\n        const steps = Math.round(newPosition / lengthPerStep);\n        let value = steps * lengthPerStep * (this.max - this.min) * 0.01 + this.min;\n        value = parseFloat(value.toFixed(this.precision));\n        this.$emit(\'input\', value);\n        this.$nextTick(() => {\n          this.displayTooltip();\n          this.$refs.tooltip && this.$refs.tooltip.updatePopper();\n        });\n        if (!this.dragging && this.value !== this.oldValue) {\n          this.oldValue = this.value;\n        }\n      }\n    }\n  };\n<\/script>\n')])])]),e("p",[n._v("main源码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n  <div\n    class="el-slider"\n    :class="{ \'is-vertical\': vertical, \'el-slider--with-input\': showInput }"\n    role="slider"\n    :aria-valuemin="min"\n    :aria-valuemax="max"\n    :aria-orientation="vertical ? \'vertical\': \'horizontal\'"\n    :aria-disabled="sliderDisabled"\n  >\n    <el-input-number\n      v-model="firstValue"\n      v-if="showInput && !range"\n      class="el-slider__input"\n      ref="input"\n      @change="emitChange"\n      :step="step"\n      :disabled="sliderDisabled"\n      :controls="showInputControls"\n      :min="min"\n      :max="max"\n      :debounce="debounce"\n      :size="inputSize">\n    </el-input-number>\n    <div\n      class="el-slider__runway"\n      :class="{ \'show-input\': showInput, \'disabled\': sliderDisabled }"\n      :style="runwayStyle"\n      @click="onSliderClick"\n      ref="slider">\n      <div\n        class="el-slider__bar"\n        :style="barStyle">\n      </div>\n      <slider-button\n        :vertical="vertical"\n        v-model="firstValue"\n        :tooltip-class="tooltipClass"\n        ref="button1">\n      </slider-button>\n      <slider-button\n        :vertical="vertical"\n        v-model="secondValue"\n        :tooltip-class="tooltipClass"\n        ref="button2"\n        v-if="range">\n      </slider-button>\n      <div\n        class="el-slider__stop"\n        v-for="(item, key) in stops"\n        :key="key"\n        :style="getStopStyle(item)"\n        v-if="showStops">\n      </div>\n      <template v-if="markList.length > 0">\n        <div>\n          <div\n            v-for="(item, key) in markList"\n            :style="getStopStyle(item.position)"\n            class="el-slider__stop el-slider__marks-stop"\n            :key="key">\n          </div>\n        </div>\n        <div class="el-slider__marks">\n          <slider-marker\n            :mark="item.mark" v-for="(item, key) in markList"\n            :key="key"\n            :style="getStopStyle(item.position)">\n          </slider-marker>\n        </div>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script type="text/babel">\n  import ElInputNumber from \'element-ui/packages/input-number\';\n  import SliderButton from \'./button.vue\';\n  import SliderMarker from \'./marker\';\n  import Emitter from \'element-ui/src/mixins/emitter\';\n\n  export default {\n    name: \'ElSlider\',\n\n    mixins: [Emitter],\n\n    inject: {\n      elForm: {\n        default: \'\'\n      }\n    },\n\n    props: {\n      min: {\n        type: Number,\n        default: 0\n      },\n      max: {\n        type: Number,\n        default: 100\n      },\n      step: {\n        type: Number,\n        default: 1\n      },\n      value: {\n        type: [Number, Array],\n        default: 0\n      },\n      showInput: {\n        type: Boolean,\n        default: false\n      },\n      showInputControls: {\n        type: Boolean,\n        default: true\n      },\n      inputSize: {\n        type: String,\n        default: \'small\'\n      },\n      showStops: {\n        type: Boolean,\n        default: false\n      },\n      showTooltip: {\n        type: Boolean,\n        default: true\n      },\n      formatTooltip: Function,\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      range: {\n        type: Boolean,\n        default: false\n      },\n      vertical: {\n        type: Boolean,\n        default: false\n      },\n      height: {\n        type: String\n      },\n      debounce: {\n        type: Number,\n        default: 300\n      },\n      label: {\n        type: String\n      },\n      tooltipClass: String,\n      marks: Object\n    },\n\n    components: {\n      ElInputNumber,\n      SliderButton,\n      SliderMarker\n    },\n\n    data() {\n      return {\n        firstValue: null,\n        secondValue: null,\n        oldValue: null,\n        dragging: false,\n        sliderSize: 1\n      };\n    },\n\n    watch: {\n      value(val, oldVal) {\n        if (this.dragging ||\n          Array.isArray(val) &&\n          Array.isArray(oldVal) &&\n          val.every((item, index) => item === oldVal[index])) {\n          return;\n        }\n        this.setValues();\n      },\n\n      dragging(val) {\n        if (!val) {\n          this.setValues();\n        }\n      },\n\n      firstValue(val) {\n        if (this.range) {\n          this.$emit(\'input\', [this.minValue, this.maxValue]);\n        } else {\n          this.$emit(\'input\', val);\n        }\n      },\n\n      secondValue() {\n        if (this.range) {\n          this.$emit(\'input\', [this.minValue, this.maxValue]);\n        }\n      },\n\n      min() {\n        this.setValues();\n      },\n\n      max() {\n        this.setValues();\n      }\n    },\n\n    methods: {\n      valueChanged() {\n        if (this.range) {\n          return ![this.minValue, this.maxValue]\n            .every((item, index) => item === this.oldValue[index]);\n        } else {\n          return this.value !== this.oldValue;\n        }\n      },\n      setValues() {\n        if (this.min > this.max) {\n          console.error(\'[Element Error][Slider]min should not be greater than max.\');\n          return;\n        }\n        const val = this.value;\n        if (this.range && Array.isArray(val)) {\n          if (val[1] < this.min) {\n            this.$emit(\'input\', [this.min, this.min]);\n          } else if (val[0] > this.max) {\n            this.$emit(\'input\', [this.max, this.max]);\n          } else if (val[0] < this.min) {\n            this.$emit(\'input\', [this.min, val[1]]);\n          } else if (val[1] > this.max) {\n            this.$emit(\'input\', [val[0], this.max]);\n          } else {\n            this.firstValue = val[0];\n            this.secondValue = val[1];\n            if (this.valueChanged()) {\n              this.dispatch(\'ElFormItem\', \'el.form.change\', [this.minValue, this.maxValue]);\n              this.oldValue = val.slice();\n            }\n          }\n        } else if (!this.range && typeof val === \'number\' && !isNaN(val)) {\n          if (val < this.min) {\n            this.$emit(\'input\', this.min);\n          } else if (val > this.max) {\n            this.$emit(\'input\', this.max);\n          } else {\n            this.firstValue = val;\n            if (this.valueChanged()) {\n              this.dispatch(\'ElFormItem\', \'el.form.change\', val);\n              this.oldValue = val;\n            }\n          }\n        }\n      },\n\n      setPosition(percent) {\n        const targetValue = this.min + percent * (this.max - this.min) / 100;\n        if (!this.range) {\n          this.$refs.button1.setPosition(percent);\n          return;\n        }\n        let button;\n        if (Math.abs(this.minValue - targetValue) < Math.abs(this.maxValue - targetValue)) {\n          button = this.firstValue < this.secondValue ? \'button1\' : \'button2\';\n        } else {\n          button = this.firstValue > this.secondValue ? \'button1\' : \'button2\';\n        }\n        this.$refs[button].setPosition(percent);\n      },\n\n      onSliderClick(event) {\n        if (this.sliderDisabled || this.dragging) return;\n        this.resetSize();\n        if (this.vertical) {\n          const sliderOffsetBottom = this.$refs.slider.getBoundingClientRect().bottom;\n          this.setPosition((sliderOffsetBottom - event.clientY) / this.sliderSize * 100);\n        } else {\n          const sliderOffsetLeft = this.$refs.slider.getBoundingClientRect().left;\n          this.setPosition((event.clientX - sliderOffsetLeft) / this.sliderSize * 100);\n        }\n        this.emitChange();\n      },\n\n      resetSize() {\n        if (this.$refs.slider) {\n          this.sliderSize = this.$refs.slider[`client${ this.vertical ? \'Height\' : \'Width\' }`];\n        }\n      },\n\n      emitChange() {\n        this.$nextTick(() => {\n          this.$emit(\'change\', this.range ? [this.minValue, this.maxValue] : this.value);\n        });\n      },\n\n      getStopStyle(position) {\n        return this.vertical ? { \'bottom\': position + \'%\' } : { \'left\': position + \'%\' };\n      }\n    },\n\n    computed: {\n      stops() {\n        if (!this.showStops || this.min > this.max) return [];\n        if (this.step === 0) {\n          process.env.NODE_ENV !== \'production\' &&\n          console.warn(\'[Element Warn][Slider]step should not be 0.\');\n          return [];\n        }\n        const stopCount = (this.max - this.min) / this.step;\n        const stepWidth = 100 * this.step / (this.max - this.min);\n        const result = [];\n        for (let i = 1; i < stopCount; i++) {\n          result.push(i * stepWidth);\n        }\n        if (this.range) {\n          return result.filter(step => {\n            return step < 100 * (this.minValue - this.min) / (this.max - this.min) ||\n              step > 100 * (this.maxValue - this.min) / (this.max - this.min);\n          });\n        } else {\n          return result.filter(step => step > 100 * (this.firstValue - this.min) / (this.max - this.min));\n        }\n      },\n\n      markList() {\n        if (!this.marks) {\n          return [];\n        }\n\n        const marksKeys = Object.keys(this.marks);\n        return marksKeys.map(parseFloat)\n          .sort((a, b) => a - b)\n          .filter(point => point <= this.max && point >= this.min)\n          .map(point => ({\n            point,\n            position: (point - this.min) * 100 / (this.max - this.min),\n            mark: this.marks[point]\n          }));\n      },\n\n      minValue() {\n        return Math.min(this.firstValue, this.secondValue);\n      },\n\n      maxValue() {\n        return Math.max(this.firstValue, this.secondValue);\n      },\n\n      barSize() {\n        return this.range\n          ? `${ 100 * (this.maxValue - this.minValue) / (this.max - this.min) }%`\n          : `${ 100 * (this.firstValue - this.min) / (this.max - this.min) }%`;\n      },\n\n      barStart() {\n        return this.range\n          ? `${ 100 * (this.minValue - this.min) / (this.max - this.min) }%`\n          : \'0%\';\n      },\n\n      precision() {\n        let precisions = [this.min, this.max, this.step].map(item => {\n          let decimal = (\'\' + item).split(\'.\')[1];\n          return decimal ? decimal.length : 0;\n        });\n        return Math.max.apply(null, precisions);\n      },\n\n      runwayStyle() {\n        return this.vertical ? { height: this.height } : {};\n      },\n\n      barStyle() {\n        return this.vertical\n          ? {\n            height: this.barSize,\n            bottom: this.barStart\n          } : {\n            width: this.barSize,\n            left: this.barStart\n          };\n      },\n\n      sliderDisabled() {\n        return this.disabled || (this.elForm || {}).disabled;\n      }\n    },\n\n    mounted() {\n      let valuetext;\n      if (this.range) {\n        if (Array.isArray(this.value)) {\n          this.firstValue = Math.max(this.min, this.value[0]);\n          this.secondValue = Math.min(this.max, this.value[1]);\n        } else {\n          this.firstValue = this.min;\n          this.secondValue = this.max;\n        }\n        this.oldValue = [this.firstValue, this.secondValue];\n        valuetext = `${this.firstValue}-${this.secondValue}`;\n      } else {\n        if (typeof this.value !== \'number\' || isNaN(this.value)) {\n          this.firstValue = this.min;\n        } else {\n          this.firstValue = Math.min(this.max, Math.max(this.min, this.value));\n        }\n        this.oldValue = this.firstValue;\n        valuetext = this.firstValue;\n      }\n      this.$el.setAttribute(\'aria-valuetext\', valuetext);\n\n      // label screen reader\n      this.$el.setAttribute(\'aria-label\', this.label ? this.label : `slider between ${this.min} and ${this.max}`);\n\n      this.resetSize();\n      window.addEventListener(\'resize\', this.resetSize);\n    },\n\n    beforeDestroy() {\n      window.removeEventListener(\'resize\', this.resetSize);\n    }\n  };\n<\/script>\n')])])]),e("h3",{attrs:{id:"自定义封装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自定义封装"}},[n._v("#")]),n._v(" 自定义封装")]),n._v(" "),e("p",[e("img",{attrs:{src:"/tech/front/range20200613/range03.jpg",alt:"图片"}})]),n._v(" "),e("p",[n._v("[需求分析] 由于项目中用到的是日期模板的显示，因而主体拖拽事件等可直接使用el-slider，样式方面可以自定义设置；其次就是日期的显示，el-slider的字段设置为数字，因而需要将日期等进行转换，此时用到"),e("a",{attrs:{href:"http://momentjs.cn",title:"JavaScript 日期处理类库",target:"_blank",rel:"noopener noreferrer"}},[n._v("moment.js"),e("OutboundLink")],1),n._v("这个库，方便统一处理")]),n._v(" "),e("p",[n._v("[目录分析] 主目录下还是vue的组件，将日期类的方法抽离到了utils下的format.js中")]),n._v(" "),e("p",[n._v("[解决方案] 主要还是template、script、style三部分")]),n._v(" "),e("p",[n._v("template代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('<template>\n  <div class="range-container">\n      <el-slider \n        v-model="s" \n        :format-tooltip="formatTooltip"\n        :max="24"\n        :step=\'1\'\n        range\n        @change=\'handleChange\'\n      >\n      </el-slider>\n  </div>\n</template>\n')])])]),e("p",[n._v("script代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<script>\n// 工具函数\nimport { formatHoursMinutes } from '@/utils/format';\n\nexport default {\n  data() {\n    return {\n      s: [this.start,this.isFullDay(this.end)],\n      formatHoursMinutes: formatHoursMinutes\n    }\n  },\n  props: {\n    start: {\n      default: 0,\n      type: Number\n    },\n    end: {\n      default: 24,\n      type: Number\n    },\n    week: {\n      default: 1,\n      type: String\n    }\n  },\n  methods: {\n\n    isFullDay(val) {\n      if(val === 0) {\n        return 24\n      } else {\n        return Number(val)\n      }\n    },\n\n    formatTooltip(val) {\n        // 进行格式转换\n        let n = parseInt(val / 1);\n        return this.formatHoursMinutes(n)\n    },\n\n    handleChange(val) {\n      const [start,end] = val;\n      const week = this.week;\n      this.$emit('changeTemplate',{start,end,week})\n    }\n  }\n}\n<\/script>\n")])])]),e("p",[n._v("style代码：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("<style lang='scss'>\n@import '@/styles/element-variables.scss';\n\n.range-container {\n  .el-slider {\n    .el-slider__runway {\n      height: 32px;\n      margin-top: 0;\n      margin-bottom: 0 !important;\n      background-color: #FFFFFF;\n      border: 1px solid #DCDFE6;\n      .el-slider__bar {\n        height: 32px;\n      }\n      .el-slider__button-wrapper {\n        top: 0;\n        height: 32px;\n        .el-slider__button {\n          width: 4px;\n          height: 32px;\n          border-radius: 0;\n          background: #121212;\n          border: none;\n        }\n      }\n      .el-slider__stop {\n        width: 1px;\n        height: 31px;\n        border-radius: 0;\n        background-color: #DCDFE6;\n      }\n      .el-slider__marks-text {\n        color: #717171;\n        margin-top: 0;\n        transform: translateX(-115%);\n      }\n    }\n  }\n}\n</style>\n")])])]),e("p",[n._v("工具函数：")]),n._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("import moment from 'moment';\n\n// 修改星期对应数值\nexport function formatWeek(val) {\n    switch (val) {\n    case '1':\n        return '星期一'\n        break;\n    case '2':\n        return '星期二'\n        break;\n    case '3':\n        return '星期三'\n        break;\n    case '4':\n        return '星期四'\n        break;\n    case '5':\n        return '星期五'\n        break;\n    case '6':\n        return '星期六'\n        break;\n    case '7':\n        return '星期天'\n        break;\n    default:\n        break;\n    }\n};\n\n// 修改数值对应小时格式\nexport function formatHours(val) {\n    return moment(val,'H').hours();\n};\n\n// 修改数值对应小时分钟格式\nexport function formatHoursMinutes(val) {\n    return moment().hour(val).minute(0).second(0).format(\"HH:mm\");\n};\n\n// 修改数值对应小时分钟格式\nexport function formatHoursMinutesSeconds(val) {\n    return moment().hour(val).minute(0).second(0).format(\"HH:mm:ss\");\n};\n")])])]),e("h3",{attrs:{id:"封装range组件常见方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#封装range组件常见方法"}},[n._v("#")]),n._v(" 封装range组件常见方法")]),n._v(" "),e("p",[n._v("封装类range组件主要就是三块：\n1、展示：主要就是进度条、滑块、显示，需要考虑行为层的接入及展示；\n2、行为：主要就是mouse、touch、drag行为的封装，一般来说会封成一个函数库，不管是原生封装、jQuery封装还是直接引用别人封装好的库，最后暴露出去都需要考虑展示层接入的范围、类型等；\n3、扩展：封装的组件提供一个很好的扩展性有利于引入及修改")]),n._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[n._v("在项目中常常需要根据需要进行组件的二次封装，在封装过程中，对组件库的理解以及对场景的扩展把握可以更好的避免组件的更改等其他因素的产生，提高功效，同时借鉴其他思路也是很好的方法，对于有志于从0封装自己一套组件库的同学，还需要掌握库的打包、环境配置、扩展以及社区的考虑，可以参考这篇文章"),e("a",{attrs:{href:"https://mp.weixin.qq.com/s/yeXdZRh880e1tr5qaYxtfg",target:"_blank",rel:"noopener noreferrer"}},[n._v("从0到1教你搭建前端团队的组件系统（高级进阶必备）"),e("OutboundLink")],1),n._v("，对于只是业务的二次封装，基于对源码的分析也能很好的提升自身的封装能力。")]),n._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[n._v("#")]),n._v(" 参考")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.jianshu.com/p/ec5412df5049",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue-range 滑块组件（1）"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://www.jianshu.com/p/7aafa1b0f85d",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue-range 滑块组件（2）-渐变色"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/tan9374/article/details/77824002",target:"_blank",rel:"noopener noreferrer"}},[n._v("前端插件之原生js写range组件"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/weixin_38930535/article/details/79542130",target:"_blank",rel:"noopener noreferrer"}},[n._v("H5中input中range类型的美化"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/top_xinxin/article/details/82531552",target:"_blank",rel:"noopener noreferrer"}},[n._v("自制简单的range（Vue）"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://www.npmjs.com/package/vue-range-calendar",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue-range-calendar"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/ktsn/vue-range-slider/tree/master/src",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue-range-slider"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/ccforward/cc/blob/master/vue-range/src/index.vue",target:"_blank",rel:"noopener noreferrer"}},[n._v("vue-range"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);t.default=s.exports}}]);