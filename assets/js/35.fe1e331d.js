(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{239:function(a,t,e){"use strict";e.r(t);var s=e(0),r=Object(s.a)({},(function(){var a=this,t=a.$createElement,e=a._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[e("h1",{attrs:{id:"前端自动化集成部署交付实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前端自动化集成部署交付实践"}},[a._v("#")]),a._v(" 前端自动化集成部署交付实践")]),a._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[a._v("#")]),a._v(" 前言")]),a._v(" "),e("p",[a._v("随着前后端分离应用模式的推广，前端项目可独立部署维护上线，不再仅仅将前端开发后打包的文件直接丢到一个文件目录下就完事大吉了，现在对前端来说也需要了解运维的相关知识，本文旨在介绍一些相关的运维概念以及一些前端运维的实践。")]),a._v(" "),e("h2",{attrs:{id:"ci-cd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ci-cd"}},[a._v("#")]),a._v(" CI/CD")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd.png",alt:"cicd"}})]),a._v(" "),e("h3",{attrs:{id:"持续集成"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续集成"}},[a._v("#")]),a._v(" 持续集成")]),a._v(" "),e("blockquote",[e("p",[a._v("continuous integration 持续集成是一种软件实践，流程为：开发 => 打包 => 集成 => 测试")])]),a._v(" "),e("h3",{attrs:{id:"持续交付"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续交付"}},[a._v("#")]),a._v(" 持续交付")]),a._v(" "),e("blockquote",[e("p",[a._v("continuous delivery 持续交付是一种软件工程手法，流程为：测试 => 发布")])]),a._v(" "),e("h3",{attrs:{id:"持续部署"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#持续部署"}},[a._v("#")]),a._v(" 持续部署")]),a._v(" "),e("blockquote",[e("p",[a._v("continous deployment 持续部署是在持续交付的管道中发布版本给最终用户的一种软件工程流程，流程为：发布 => 部署上线")])]),a._v(" "),e("p",[a._v("持续集成、持续交付、持续部署是发布流程的不同阶段")]),a._v(" "),e("h2",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[a._v("#")]),a._v(" Docker")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/docker.png",alt:"docker"}})]),a._v(" "),e("h3",{attrs:{id:"容器-镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#容器-镜像"}},[a._v("#")]),a._v(" 容器 + 镜像")]),a._v(" "),e("blockquote",[e("p",[a._v("docker 是一个开源的应用容器引擎。开发者可以打包自己的应用到容器里面，然后迁移到其他机器的 docker 应用中；开发者可以快速制作一个自己自定义的镜像，快速分享，也可以上传到镜像库进行存取和管理；容器之间相互隔离不冲突，硬件资源共享。")])]),a._v(" "),e("h3",{attrs:{id:"docker-in-docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-in-docker"}},[a._v("#")]),a._v(" Docker in Docker")]),a._v(" "),e("blockquote",[e("p",[a._v("容器内仅部署 docker 命令行工具（作为客户端），实际执行交由宿主机内的 docker-engine（服务器）")])]),a._v(" "),e("h2",{attrs:{id:"jenkins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#jenkins"}},[a._v("#")]),a._v(" Jenkins")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/jenkins.png",alt:"jenkins"}})]),a._v(" "),e("h3",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),e("blockquote",[e("p",[a._v("Jenkins 是一个基于Java语言开发的CI持续构建工具，主要用于持续、自动的构建/测试软件项目。它可以执行你预先设定好的设置和脚本，也可以和 Git工具做集成，实现自动触发和定时触发器构建。")])]),a._v(" "),e("h2",{attrs:{id:"gitlab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab"}},[a._v("#")]),a._v(" Gitlab")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/gitlab.png",alt:"gitlab"}})]),a._v(" "),e("h3",{attrs:{id:"概念-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念-2"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),e("blockquote",[e("p",[a._v("gitlab既是一种服务，也是一种软件。既可以在gitlab.com上去租用服务，也可以下载gitlab阮籍你自己搭建服务")])]),a._v(" "),e("h2",{attrs:{id:"nginx"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[a._v("#")]),a._v(" Nginx")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/nginx.png",alt:"nginx"}})]),a._v(" "),e("h3",{attrs:{id:"概念-3"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念-3"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),e("blockquote",[e("p",[a._v("Nginx采用C进行编写，处理静态文件，索引文件以及自动索引;打开文件描述符缓冲。无缓存的反向代理加速，简单的负载均衡和容错。FastCGI，简单的负载均衡和容错。模块化的结构。")])]),a._v(" "),e("p",[a._v("Nginx是一个高性能的HTTP和反向代理web服务器，同时也提供了IMAP/POP3/SMTP服务")]),a._v(" "),e("h2",{attrs:{id:"nexus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexus"}},[a._v("#")]),a._v(" Nexus")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/nexus.png",alt:"nexus"}})]),a._v(" "),e("h3",{attrs:{id:"概念-4"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念-4"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),e("blockquote",[e("p",[a._v("制品仓库: 构建过程的输出物，包括软件包，测试报告，应用配置文件等可在服务器上直接 运行或可查看二进制形式的文件，通常称之为二进制软件制品。具有版本管理，历史管理，权限校验等功能。")])]),a._v(" "),e("p",[a._v("Nexus可在自己的局域网内搭建自己的远程仓库服务器，称为私服，私服服务器即是公司内部的maven远程仓库，私服还充当一个代理服务器，可从互联网中央仓库自动下载")]),a._v(" "),e("ul",[e("li",[e("p",[a._v("proxy 本地仓库，通常我们会部署自己的构件到这一类型的仓库。比如公司的第二方库")])]),a._v(" "),e("li",[e("p",[a._v("hosted 代理仓库，它们被用来代理远程的公共仓库，如maven中央仓库")])]),a._v(" "),e("li",[e("p",[a._v("group 仓库组，用来合并多个hosted/proxy仓库，当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可")])])]),a._v(" "),e("h2",{attrs:{id:"ansible"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#ansible"}},[a._v("#")]),a._v(" Ansible")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/ansible.png",alt:"ansible"}})]),a._v(" "),e("h3",{attrs:{id:"概念-5"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念-5"}},[a._v("#")]),a._v(" 概念")]),a._v(" "),e("blockquote",[e("p",[a._v("ansible是基于Python开发的自动化运维工具。其优势在于可以批量操作，基本原理是通过ansible的核心进行通过ssh传输的通信进行相关的分发处理，进行user与host的通信")])]),a._v(" "),e("h3",{attrs:{id:"modules"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#modules"}},[a._v("#")]),a._v(" Modules")]),a._v(" "),e("p",[e("code",[a._v("执行命令的功能模块，Ansible2.3版本为止，共有1039个模块。还可以自定义模块")])]),a._v(" "),e("h3",{attrs:{id:"inventory"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#inventory"}},[a._v("#")]),a._v(" Inventory")]),a._v(" "),e("p",[e("code",[a._v("管理主机的清单，默认是/etc/ansible/hosts文件")])]),a._v(" "),e("h3",{attrs:{id:"playbook"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#playbook"}},[a._v("#")]),a._v(" Playbook")]),a._v(" "),e("p",[e("code",[a._v("任务剧本（又称任务集），编排定义Ansible任务集的配置文件，由Ansible顺序依次执行，yaml格式")])]),a._v(" "),e("h3",{attrs:{id:"plugins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#plugins"}},[a._v("#")]),a._v(" Plugins")]),a._v(" "),e("p",[e("code",[a._v("插件，模块功能的补充，常有连接类型插件，循环插件，变量插件，过滤插件，插件功能用的较少")])]),a._v(" "),e("h3",{attrs:{id:"api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[a._v("#")]),a._v(" API")]),a._v(" "),e("p",[e("code",[a._v("提供给第三方程序调用的应用程序编程接口")])]),a._v(" "),e("h2",{attrs:{id:"实践"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#实践"}},[a._v("#")]),a._v(" 实践")]),a._v(" "),e("p",[a._v("操作环境： linux/centos7")]),a._v(" "),e("p",[a._v("操作内容： 一台 gitlab + jenkins + ansible 服务器推送多台 nginx 服务器")]),a._v(" "),e("h3",{attrs:{id:"docker-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-2"}},[a._v("#")]),a._v(" docker")]),a._v(" "),e("ol",[e("li",[a._v("安装依赖")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("yum install -y yum-utils device-mapper-persistent-data lvm2\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("使用阿里云源安装")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\nyum install docker-ce\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("启动docker")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("systemctl start docker\n\nsystemctl enable docker\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("可配置阿里云容器镜像加速器")])]),a._v(" "),e("p",[e("a",{attrs:{href:"https://cr.console.aliyun.com/",target:"_blank",rel:"noopener noreferrer"}},[a._v("阿里云容器镜像服务"),e("OutboundLink")],1)]),a._v(" "),e("h3",{attrs:{id:"gitlab-jenkins-ansible"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#gitlab-jenkins-ansible"}},[a._v("#")]),a._v(" gitlab + jenkins + ansible")]),a._v(" "),e("h4",{attrs:{id:"安装jenkins"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装jenkins"}},[a._v("#")]),a._v(" 安装jenkins")]),a._v(" "),e("ol",[e("li",[a._v("安装防火墙")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('yum install firewalld systemd -y\nservice firewalld start\nfirewall-cmd --permanent --add-service=http\nfirewall-cmd --permanent --add-rich-rule="rule family="ipv4" source address="xxx.xx.x.x/16" accept"\nsystemctl reload firewalld\n')])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("编写Dockerfile")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('FROM jenkins/jenkins\nUSER root\n# 清除了基础镜像设置的源，切换成阿里云源\nRUN echo \'\' > /etc/apt/sources.list.d/jessie-backports.list \\\n  && echo "deb http://mirrors.aliyun.com/debian jessie main contrib non-free" > /etc/apt/sources.list \\\n  && echo "deb http://mirrors.aliyun.com/debian jessie-updates main contrib non-free" >> /etc/apt/sources.list \\\n  && echo "deb http://mirrors.aliyun.com/debian-security jessie/updates main contrib non-free" >> /etc/apt/sources.list\n# 更新源并安装缺少的包\nRUN apt-get update && apt-get install -y libltdl7\nARG dockerGid=999\n\nRUN echo "docker:x:${dockerGid}:jenkins" >> /etc/group\n')])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("构建jenkins镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker build -t local/jenkins .\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("启动镜像")])]),a._v(" "),e("p",[a._v("新建/home/jenkins/目录，将jenkins目录外挂到宿主机内")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mkdir /home/jenkins\n\nchown -R 1000 /home/jenkins/\n")])])]),e("p",[a._v("镜像创建容器并启动")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -itd --name jenkins -p 8080:8080 -p 50000:50000 \\\n-v /var/run/docker.sock:/var/run/docker.sock \\\n-v /usr/bin/docker:/usr/bin/docker \\\n-v /home/jenkins:/var/jenkins_home \\\n--restart always \\\n--user root local/jenkins\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[a._v("启动jenkins")])]),a._v(" "),e("p",[a._v("释放8080和50000端口")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("firewall-cmd --zone=public --add-port=8080/tcp --permanent\nfirewall-cmd --zone=public --add-port=50000/tcp --permanent\n\nsystemctl reload firewalld\n")])])]),e("ol",{attrs:{start:"6"}},[e("li",[a._v("初始化jenkins配置")])]),a._v(" "),e("blockquote",[e("p",[a._v("修改密码 => 下载插件 => 重启容器")])]),a._v(" "),e("p",[a._v("初始化jenkins后会有一个初始密码，可通过"),e("code",[a._v("docker exec -it jenkins /bin/bash")]),a._v("进入容器后查看"),e("code",[a._v("cat /var/jenkins_home/secrets/initialAdminPassword")])]),a._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[a._v("配置公钥私钥")])]),a._v(" "),e("p",[a._v("进入jenkins容器，通过ssh-keygen生成公钥私钥")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker exec -it jenkins /bin/bash\nssh-keygen -t rsa\n")])])]),e("p",[a._v("进入~/.ssh查看id_rsa和id_rsa.pub，为jenkins配置")]),a._v(" "),e("blockquote",[e("p",[a._v("系统管理 => 安全 => Manage Credentials => 全局 => 添加凭据 => 选择SSH Username with private key")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd01.png",alt:"cicd01"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd02.png",alt:"cicd02"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd03.png",alt:"cicd03"}})]),a._v(" "),e("ol",{attrs:{start:"8"}},[e("li",[a._v("配置node环境")])]),a._v(" "),e("blockquote",[e("p",[a._v("系统管理 => 全局工具配置 => NodeJS")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd04.png",alt:"cicd04"}})]),a._v(" "),e("ol",{attrs:{start:"9"}},[e("li",[a._v("新建任务")])]),a._v(" "),e("blockquote",[e("p",[a._v("首页 => 左侧导航 => 新建任务 => 源码管理 + 构建环境 + 构建")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd05.png",alt:"cicd05"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd06.png",alt:"cicd06"}})]),a._v(" "),e("p",[a._v("构建这里选择执行shell，可将命令写入其中，这里镜像名称通常为jenkins服务器地址，后边加时间戳可以避免重名")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("set -e\ntimestamp=`date '+%Y%m%d%H%M%S'`\n\nnode -v\nnpm -v\n\nrm -rf node_modules package-lock.json\n\nnpm install\n\nnpm run build\n\n(docker ps | grep ansible) && (docker rm -f ansible)\n\n# 编译docker镜像\ndocker build -t xxx.xx.xx.xxx:8082/fe/nginx-fe-$timestamp .\n\n# 推送docker镜像到制品库\ndocker push xxx.xx.xx.xxx:8082/fe/nginx-fe-$timestamp\n\ndocker run -id --name ansible ansible:t1\n\ndocker exec -i ansible ansible-playbook --syntax-check /root/playbook.yml\n\ndocker exec -i ansible ansible-playbook -e \"timestamp=$timestamp\" /root/playbook.yml\n\ndocker rm -f ansible\n")])])]),e("ol",{attrs:{start:"10"}},[e("li",[a._v("登录制品库")])]),a._v(" "),e("p",[a._v("修改daemon.json")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('vi /etc/docker/daemon.json\n\n{\n    "insecure-registries": [\n        "xxx.xx.xx.xxx:8082",\n        "xxx.xx.xx.xxx:8081"\n    ]\n}\n')])])]),e("p",[a._v("重启docker")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("systemctl daemon-reload\nsystemctl restart docker\n")])])]),e("p",[a._v("docker login登录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker exec -it jenkins /bin/bash\n\ndocker login 服务器ip:端口\nexit\n")])])]),e("h4",{attrs:{id:"安装gitlab"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装gitlab"}},[a._v("#")]),a._v(" 安装gitlab")]),a._v(" "),e("ol",[e("li",[a._v("拉取gitlab镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull gitlab/gitlab-ce\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("创建gitlab容器")])]),a._v(" "),e("p",[a._v("创建gitlab工作目录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mkdir /home/gitlab\n")])])]),e("p",[a._v("启动gitlab容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -itd -p 443:443 \\\n-p 8899:8899 \\\n-p 333:333 \\\n--name gitlab \\\n--restart always \\\n-v /home/gitlab/config:/etc/gitlab \\\n-v /home/gitlab/logs:/var/log/gitlab \\\n-v /home/gitlab/data:/var/opt/gitlab \\\ngitlab/gitlab-ce\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("修改防火墙")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("firewall-cmd --zone=public --add-port=333/tcp --permanent\nfirewall-cmd --zone=public --add-port=8899/tcp --permanent\n\nsystemctl reload firewalld\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("修改gitlab配置文件")])]),a._v(" "),e("p",[a._v("修改配置文件")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("vi /home/gitlab/config/gitlab.rb\n\nexteranl_url 'http://外部访问域名/地址:端口'\ngitlab_rails['gitlab_ssh_host'] = 'SSH外部访问域名/地址'\ngitlab_rails['gitlab_shell_ssh_port'] = SSH端口\n")])])]),e("p",[a._v("修改ssh端口")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker exec -it gitlab /bin/bash\n\nvi /assets/sshd_config\nvi /etc/ssh/sshd_config\n")])])]),e("p",[a._v("重启gitlab")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker restart gitlab\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[a._v("启动gitlab")])]),a._v(" "),e("blockquote",[e("p",[a._v("宿主机:端口 => 修改密码")])]),a._v(" "),e("p",[a._v("修改gitlab密码")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('docker exec -it gitlab /bin/bash\n\ngitlab-rails console production\n\nuser = Uer.where(id:1).first\nuser.password = "xxxxx"\nuser.password_confirmation = "xxxxx"\n\nuser.save!\n\nquit\n')])])]),e("ol",{attrs:{start:"6"}},[e("li",[a._v("配置jenkins的公钥")])]),a._v(" "),e("blockquote",[e("p",[a._v("登录gitlab => 点击头像 => 设置 => SSH密钥")])]),a._v(" "),e("p",[a._v("将jenkins中查到的"),e("code",[a._v("~/.ssh/id_rsa.pub")]),a._v("添加到gitlab的ssh密钥中")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd07.png",alt:"cicd07"}})]),a._v(" "),e("ol",{attrs:{start:"7"}},[e("li",[a._v("在前端项目根目录下添加Dockerfile")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM nginx:1.15-alpine\nCOPY dist /usr/share/nginx/html\nWORKDIR /usr/share/nginx/html\n")])])]),e("ol",{attrs:{start:"8"}},[e("li",[a._v("新建仓库 + 配置webhook")])]),a._v(" "),e("p",[a._v("新建仓库后，配置webhook，可通过git相关命令进行自动化部署，可参考这篇文章"),e("a",{attrs:{href:"https://www.jianshu.com/p/00bc0323e83f",target:"_blank",rel:"noopener noreferrer"}},[a._v("[后端]gitlab之webhook自动部署"),e("OutboundLink")],1),a._v("，github的webhook配置可参考这篇"),e("a",{attrs:{href:"https://blog.csdn.net/qq_21768483/article/details/80177920",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jenkins与Github集成 webhook配置"),e("OutboundLink")],1)]),a._v(" "),e("h4",{attrs:{id:"安装nexus"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装nexus"}},[a._v("#")]),a._v(" 安装nexus")]),a._v(" "),e("ol",[e("li",[a._v("拉取nexus镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull sonatype/nexus3\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("创建nexus容器")])]),a._v(" "),e("p",[a._v("创建nexus工作目录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mkdir /home/nexus && chown -R 200 /home/nexus\n")])])]),e("p",[a._v("启动容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -d -p 8081:8081 -P 8082:8082 \\\n--name nexus \\\n-v /home/nexus:/nexus-data \\\n--restart always \\\nsonatype/nexus3\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("修改防火墙")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("firewall-cmd --zone=public --add-port=8081/tcp --permanent\nfirewall-cmd --zone=public --add-port=8082/tcp --permanent\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("启动nexus")])]),a._v(" "),e("p",[a._v("查看日志")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker logs -f nexus\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[a._v("修改配置")])]),a._v(" "),e("blockquote",[e("p",[a._v("进入nexus => 修改密码")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd08.png",alt:"cicd08"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd09.png",alt:"cicd09"}})]),a._v(" "),e("ol",{attrs:{start:"6"}},[e("li",[a._v("创建私服")])]),a._v(" "),e("blockquote",[e("p",[a._v("齿轮图标 => Repositories => Create repository => 填写表单")])]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd10.png",alt:"cicd10"}})]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/cicd11.png",alt:"cicd11"}})]),a._v(" "),e("h4",{attrs:{id:"安装ansible"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#安装ansible"}},[a._v("#")]),a._v(" 安装ansible")]),a._v(" "),e("ol",[e("li",[a._v("创建ansible工作目录")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mkdir /home/ansible-file && cd /home/ansible-file\n\nmkdir ssh\ntouch Dockerfile\ntouch hosts\ntouch playbook.yml\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("将配置的公钥私钥放入ssh文件夹下")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("cp -r ~/.ssh/* /home/ansible-file/ssh/\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("编辑Dockerfile")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("FROM centos:7\nRUN yum -y install wget curl vim openssh-clients\nRUN wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo\nRUN yum clean all\nRUN yum makecache\n\nCOPY ssh /root/.ssh/\n\nRUN chmod 755 ~/.ssh/\nRUN chmod 600 ~/.ssh/id_rsa ~/.ssh/id_rsa.pub\nRUN yum -y install ansible\n\nCOPY hosts /etc/ansible/\n\nRUN sed -i 's/^#host_key_checking = False/host_key_checking = False/' /etc/ansible/ansible.cfg\nRUN ansible --version\n\nCOPY playbook.yml /root/\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("编辑hosts 多台服务器ip")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("[fe-servers]\nxxx.xx.xx.xxx\nxxx.xx.xx.xxx\nxxx.xx.xx.xxx\n")])])]),e("ol",{attrs:{start:"5"}},[e("li",[a._v("编辑playbook")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("---\n- hosts: all\n  remote_user: root\n  vars: \n    timestamp: 20200806165833\n  tasks:\n    - name: docker pull new images\n      shell: 'chdir=~ docker pull xxx.xx.xx.xxx:8082/fe/nginx-fe-{{timestamp}}\n    - name: docker rmf\n      shell: 'chdir=~ docker ps | grep xxx && docker rm -f xxx'\n      ignore_errors: true\n    - name: docker run\n      shell: 'chdir=~ docker run -p 80:80 -itd --name xxx xxx.xx.xx.xxx:8082/fe/nginx-fe-{{timestamp}}'\n")])])]),e("h3",{attrs:{id:"nginx-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nginx-2"}},[a._v("#")]),a._v(" nginx")]),a._v(" "),e("ol",[e("li",[a._v("拉取nginx镜像")])]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker pull nginx\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[a._v("创建nginx容器")])]),a._v(" "),e("p",[a._v("创建nginx工作目录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("mkdir /home/nginx\n")])])]),e("p",[a._v("启动容器")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker run -itd -p 80:80 --name xxx \\\n-v /home/nginx/html:/usr/share/nginx/html \\\n-v /home/nginx/logs:/var/log/nginx \\\n--restart always \\\nnginx\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[a._v("公钥私钥")])]),a._v(" "),e("p",[a._v("使用ssh-keygen创建公钥私钥")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("ssh-keygen -t rsa\n")])])]),e("p",[a._v("在.ssh文件夹下创建authorized_keys，将jenkins的公钥放入其中")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("cd .ssh/\ntouch authorized_keys\n\nvi authorized_keys\n")])])]),e("ol",{attrs:{start:"4"}},[e("li",[a._v("登录制品库")])]),a._v(" "),e("p",[a._v("修改daemon.json")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v('vi /etc/docker/daemon.json\n\n{\n    "insecure-registries": [\n        "xxx.xx.xx.xxx:8082",\n        "xxx.xx.xx.xxx:8081"\n    ]\n}\n')])])]),e("p",[a._v("重启docker")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("systemctl daemon-reload\nsystemctl restart docker\n")])])]),e("p",[a._v("docker login登录")]),a._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[a._v("docker exec -it nginx /bin/bash\n\ndocker login 服务器ip:端口\nexit\n")])])]),e("h3",{attrs:{id:"结果"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结果"}},[a._v("#")]),a._v(" 结果")]),a._v(" "),e("p",[e("img",{attrs:{src:"/tech/back/cicd/example.png",alt:"example"}})]),a._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),e("p",[a._v("前端自动化部署可在内部开发及后续上线工程中进行运维控制，对前端来说也是越来越重要的能力，整体流程：")]),a._v(" "),e("blockquote",[e("p",[a._v("前端git提交 => gitlab/github更新 => 触发webhook命令 => jenkins构建 => nexus制品库生成 => ansible分发 => 多台nginx交付")])]),a._v(" "),e("p",[a._v("对于gitlab来说还有不同stage进行的不同阶段的cicd全流程服务，具体可根据团队的需求进行个性化的定制，如果后期项目庞大，比如采用了微前端架构对不同框架如angular、react、vue进行不同层次部署交付，可配合k8s(ps: 感兴趣的同学，可参看这篇文章"),e("a",{attrs:{href:""}}),a._v(")等进行更为严格的开发上线流程控制。")]),a._v(" "),e("p",[a._v("总之，在大前端的趋势下，前端延伸的方向也更为多样，对于我们的要求也会越来越多，工程化、智能化、可视化等等，要在某一领域有所建树，我们都还要不断努力才行，加油！与君共勉！")]),a._v(" "),e("h2",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.jianshu.com/p/00bc0323e83f",target:"_blank",rel:"noopener noreferrer"}},[a._v("[后端]gitlab之webhook自动部署"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://blog.csdn.net/qq_21768483/article/details/80177920",target:"_blank",rel:"noopener noreferrer"}},[a._v("Jenkins与Github集成 webhook配置"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/sunju/articles/12882348.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("k8s部署Vue前端"),e("OutboundLink")],1)]),a._v(" "),e("li",[e("a",{attrs:{href:"https://www.51mimu.com/html/news/840.html",target:"_blank",rel:"noopener noreferrer"}},[a._v("云前端新物种-微前端体系"),e("OutboundLink")],1)])]),a._v(" "),e("h2",{attrs:{id:"感谢"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#感谢"}},[a._v("#")]),a._v(" 感谢")]),a._v(" "),e("p",[a._v("在此，特别感谢码云前端王圣松大佬的分享，此为其个人历程分享"),e("a",{attrs:{href:"https://juejin.im/post/6844904144025681934",target:"_blank",rel:"noopener noreferrer"}},[a._v("一位00后前端2年经验的成长历程"),e("OutboundLink")],1),a._v("，感兴趣的同学可以关注一波")])])}),[],!1,null,null,null);t.default=r.exports}}]);