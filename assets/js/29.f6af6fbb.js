(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{232:function(n,e,t){"use strict";t.r(e);var r=t(0),a=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"编程题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编程题"}},[n._v("#")]),n._v(" 编程题")]),n._v(" "),t("h2",{attrs:{id:"方法库部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法库部分"}},[n._v("#")]),n._v(" 方法库部分")]),n._v(" "),t("h3",{attrs:{id:"实现防抖函数-debounce"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现防抖函数-debounce"}},[n._v("#")]),n._v(" 实现防抖函数(debounce)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const debounce = (fn, delay) => {\n        let timer = null;\n        return (...args) => {\n            clearTimeout(timer);\n            timer = setTimeout(() => {\n                fn.apply(this, args);\n            }, delay);\n        };\n    };\n")])])]),t("p",[n._v("underscore版本:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    _.debounce = function(func, wait, immediate) {\n        var timeout, result;\n\n        var later = function(context, args) {\n        timeout = null;\n        if (args) result = func.apply(context, args);\n        };\n\n        var debounced = restArguments(function(args) {\n        if (timeout) clearTimeout(timeout);\n        if (immediate) {\n            var callNow = !timeout;\n            timeout = setTimeout(later, wait);\n            if (callNow) result = func.apply(this, args);\n        } else {\n            timeout = _.delay(later, wait, this, args);\n        }\n\n        return result;\n        });\n\n        debounced.cancel = function() {\n        clearTimeout(timeout);\n        timeout = null;\n        };\n\n        return debounced;\n    };\n")])])]),t("p",[n._v("lodash版本")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    import isObject from './isObject.js'\n    import root from './.internal/root.js'\n    function debounce(func, wait, options) {\n        let lastArgs,\n            lastThis,\n            maxWait,\n            result,\n            timerId,\n            lastCallTime\n\n        let lastInvokeTime = 0\n        let leading = false\n        let maxing = false\n        let trailing = true\n\n        const useRAF = (!wait && wait !== 0 && typeof root.requestAnimationFrame === 'function')\n\n        if (typeof func !== 'function') {\n            throw new TypeError('Expected a function')\n        }\n        wait = +wait || 0\n        if (isObject(options)) {\n            leading = !!options.leading\n            maxing = 'maxWait' in options\n            maxWait = maxing ? Math.max(+options.maxWait || 0, wait) : maxWait\n            trailing = 'trailing' in options ? !!options.trailing : trailing\n        }\n\n        function invokeFunc(time) {\n            const args = lastArgs\n            const thisArg = lastThis\n\n            lastArgs = lastThis = undefined\n            lastInvokeTime = time\n            result = func.apply(thisArg, args)\n            return result\n        }\n\n        function startTimer(pendingFunc, wait) {\n            if (useRAF) {\n            root.cancelAnimationFrame(timerId)\n            return root.requestAnimationFrame(pendingFunc)\n            }\n            return setTimeout(pendingFunc, wait)\n        }\n\n        function cancelTimer(id) {\n            if (useRAF) {\n            return root.cancelAnimationFrame(id)\n            }\n            clearTimeout(id)\n        }\n\n        function leadingEdge(time) {\n            lastInvokeTime = time\n            timerId = startTimer(timerExpired, wait)\n            return leading ? invokeFunc(time) : result\n        }\n\n        function remainingWait(time) {\n            const timeSinceLastCall = time - lastCallTime\n            const timeSinceLastInvoke = time - lastInvokeTime\n            const timeWaiting = wait - timeSinceLastCall\n\n            return maxing\n            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)\n            : timeWaiting\n        }\n\n        function shouldInvoke(time) {\n            const timeSinceLastCall = time - lastCallTime\n            const timeSinceLastInvoke = time - lastInvokeTime\n\n            return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait))\n        }\n\n        function timerExpired() {\n            const time = Date.now()\n            if (shouldInvoke(time)) {\n            return trailingEdge(time)\n            }\n            timerId = startTimer(timerExpired, remainingWait(time))\n        }\n\n        function trailingEdge(time) {\n            timerId = undefined\n\n            if (trailing && lastArgs) {\n            return invokeFunc(time)\n            }\n            lastArgs = lastThis = undefined\n            return result\n        }\n\n        function cancel() {\n            if (timerId !== undefined) {\n            cancelTimer(timerId)\n            }\n            lastInvokeTime = 0\n            lastArgs = lastCallTime = lastThis = timerId = undefined\n        }\n\n        function flush() {\n            return timerId === undefined ? result : trailingEdge(Date.now())\n        }\n\n        function pending() {\n            return timerId !== undefined\n        }\n\n        function debounced(...args) {\n            const time = Date.now()\n            const isInvoking = shouldInvoke(time)\n\n            lastArgs = args\n            lastThis = this\n            lastCallTime = time\n\n            if (isInvoking) {\n            if (timerId === undefined) {\n                return leadingEdge(lastCallTime)\n            }\n            if (maxing) {\n                timerId = startTimer(timerExpired, wait)\n                return invokeFunc(lastCallTime)\n            }\n            }\n            if (timerId === undefined) {\n            timerId = startTimer(timerExpired, wait)\n            }\n            return result\n        }\n        debounced.cancel = cancel\n        debounced.flush = flush\n        debounced.pending = pending\n        return debounced\n    }\n\n    export default debounce    \n")])])]),t("h3",{attrs:{id:"实现节流函数-throttle"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现节流函数-throttle"}},[n._v("#")]),n._v(" 实现节流函数(throttle)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const throttle = (fn, delay = 500) => {\n        let flag = true;\n        return (...args) => {\n            if (!flag) return;\n            flag = false;\n            setTimeout(() => {\n                fn.apply(this, args);\n                flag = true;\n            }, delay);\n        };\n    };\n")])])]),t("p",[n._v("underscore版本:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    _.throttle = function(func, wait, options) {\n        var timeout, context, args, result;\n        var previous = 0;\n        if (!options) options = {};\n\n        var later = function() {\n        previous = options.leading === false ? 0 : _.now();\n        timeout = null;\n        result = func.apply(context, args);\n        if (!timeout) context = args = null;\n        };\n\n        var throttled = function() {\n        var now = _.now();\n        if (!previous && options.leading === false) previous = now;\n        var remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n            clearTimeout(timeout);\n            timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout) context = args = null;\n        } else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n        };\n\n        throttled.cancel = function() {\n        clearTimeout(timeout);\n        previous = 0;\n        timeout = context = args = null;\n        };\n\n        return throttled;\n    };\n")])])]),t("p",[n._v("lodash版本:")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    import debounce from './debounce.js'\n    import isObject from './isObject.js'\n    function throttle(func, wait, options) {\n        let leading = true\n        let trailing = true\n\n        if (typeof func !== 'function') {\n            throw new TypeError('Expected a function')\n        }\n        if (isObject(options)) {\n            leading = 'leading' in options ? !!options.leading : leading\n            trailing = 'trailing' in options ? !!options.trailing : trailing\n        }\n        return debounce(func, wait, {\n            leading,\n            trailing,\n            'maxWait': wait\n        })\n    }\n\n    export default throttle\n")])])]),t("h3",{attrs:{id:"实现lazy-load懒加载"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现lazy-load懒加载"}},[n._v("#")]),n._v(" 实现lazy-load懒加载")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let imgs=document.querySelectorAll('img');\n    let clientHeight=window.innerHeight || document.documentElement.clientHeight || document.body.clientHeight\n    function lazyLoad(){\n        let scrollTop=window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;\n        for(let i=0;i<imgs.length;i++){\n            let x=clientHeight + scrollTop-imgs[i].offsetTop;\n            if(x>0 && x<clientHeight+imgs[i].height){\n                imgs[i].src=imgs[i].getAttribute('data')\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现拖拽"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现拖拽"}},[n._v("#")]),n._v(" 实现拖拽")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    window.onload=function(){\n        let drag=document.getElementById('box');\n        drag.onmousedown=function(e){\n            let e = e || window.event;\n            let diffX=e.clientX-drag.offsetLeft;\n            let diffY=e.clientY-drag.offsetTop;\n            drag.onmousemove=function(e){\n                let left=e.clientX-diffX;\n                let top=e.clientY-diffY;\n                if(left<0){\n                    left=0;\n                }else if(left>window.innerWidth-drag.offsetWidth){\n                    left=window.innerWidth-drag.offsetWidth;\n                }\n                if(top<0){\n                    top=0;\n                }else if(top>window.innerHeight-drag.offsetHeight){\n                    top=window.innerHeight-drag.offsetHeight\n                }\n                drag.style.left=left+'px';\n                drag.style.top=top+'px';\n            }\n            drag.onmouseup=function(e){\n                this.onmousemove=null;\n                this.onmouseup=null;\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现基于promise的ajax函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现基于promise的ajax函数"}},[n._v("#")]),n._v(" 实现基于Promise的ajax函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    function ajax(url,method,fn,type){\n        return new Promise((resolve,reject)=>{\n                var xhr=new XMLHttpRequest();\n                xhr.onreadystatechange=function(){\n                    if(xhr.readyState==4){\n                        if(xhr.status==200){\n                            //var result=xhr.responseText;\n                            //fn(result);\n                            resolve(JSON.parse(xhr.responseText).count);\n                        }\t\n                    }\n                };\n\n                xhr.open(method,url+"?"+type,true);\n\n                if(method=="post"){\n                    xhr.setRequestHeader("Content-Type","application/x-www-form-urlencoded");\n                }\n\n                if(method=="get"){\n                    xhr.send(null);\n                }else if(method=="post"){\n                    xhr.send(type);\n                }\n\n            }\n        )\t\n    }\n')])])]),t("h3",{attrs:{id:"实现一个浅克隆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个浅克隆"}},[n._v("#")]),n._v(" 实现一个浅克隆")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function clone(obj){\n        let newObj={};\n        for(let key in obj){\n            newObj[key]=obj[key];\n        }\n        return newObj;\n    }\n")])])]),t("h3",{attrs:{id:"实现一个深克隆-deepclone"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个深克隆-deepclone"}},[n._v("#")]),n._v(" 实现一个深克隆(deepclone)")]),n._v(" "),t("p",[n._v("简版：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function clone(obj){\n        if(obj===null){\n            return null\n        };\n        if({}.toString.call(obj)==='[object Array]'){\n            let newArr=[];\n            newArr=obj.slice();\n            return newArr;\n        };\n        let newObj={};\n        for(let key in obj){\n            if(typeof obj[key]!=='object'){\n                newObj[key]=obj[key];\n            }else{\n                newObj[key]=clone(obj[key]);\n            }\n        }\n    }\n")])])]),t("p",[n._v("完整版：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    const clone = parent => {\n        const isType = (obj, type) => {\n            if (typeof obj !== "object") return false;\n            const typeString = Object.prototype.toString.call(obj);\n            let flag;\n            switch (type) {\n                case "Array":\n                    flag = typeString === "[object Array]";\n                    break;\n                case "Date":\n                    flag = typeString === "[object Date]";\n                    break;\n                case "RegExp":\n                    flag = typeString === "[object RegExp]";\n                    break;\n                default:\n                    flag = false;\n            }\n            return flag;\n        };\n\n        const getRegExp = re => {\n            var flags = "";\n            if (re.global) flags += "g";\n            if (re.ignoreCase) flags += "i";\n            if (re.multiline) flags += "m";\n            return flags;\n        };\n\n        const parents = [];\n        const children = [];\n\n        const _clone = parent => {\n            if (parent === null) return null;\n            if (typeof parent !== "object") return parent;\n\n            let child, proto;\n\n            if (isType(parent, "Array")) {\n                child = [];\n            } else if (isType(parent, "RegExp")) {\n                child = new RegExp(parent.source, getRegExp(parent));\n                if (parent.lastIndex) child.lastIndex = parent.lastIndex;\n            } else if (isType(parent, "Date")) {\n                child = new Date(parent.getTime());\n            } else {\n                proto = Object.getPrototypeOf(parent);\n                child = Object.create(proto);\n            }\n\n            const index = parents.indexOf(parent);\n\n            if (index != -1) {\n                return children[index];\n            }\n            parents.push(parent);\n            children.push(child);\n\n            for (let i in parent) {\n                child[i] = _clone(parent[i]);\n            }\n            return child;\n        };\n\n        return _clone(parent);\n    };\n')])])]),t("h3",{attrs:{id:"实现一个深冻结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个深冻结"}},[n._v("#")]),n._v(" 实现一个深冻结")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function deepFreeze(object){\n        let propNames=Object.getOwnPropertyNames(object);\n        for(let name of propNames){\n            let value=object[name];\n            object[name]=value && typeof value === 'object' ?\n                deepFreeze(value) : value;\n        }\n        return Object.freeze(object);\n    }\n")])])]),t("h3",{attrs:{id:"实现一个深比较"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个深比较"}},[n._v("#")]),n._v(" 实现一个深比较")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function deepCompare(a,b){\n        if(a===null || typeof a!=='object' || b===null || typeof b!=='object'){\n            return a===b\n        }\n        const propsA=Object.getOwnPropertyDescriptors(a);\n        const propsB=Object.getOwnPropertyDescriptors(b);\n        if(Object.keys(propsA).length!==Object.keys(propsB).length){\n            return false\n        }\n        return Object.keys(propsA).every(\n            key=>deepCompare(a[key],b[key])\n        )\n    }\n")])])]),t("h3",{attrs:{id:"解析url-params为对象"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解析url-params为对象"}},[n._v("#")]),n._v(" 解析URL Params为对象")]),n._v(" "),t("p",[n._v("简版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function parseQueryString(url){\n        let search=url.split('?')[1];\n        let strs=search.split('&');\n        let params={};\n        for(let str of strs){\n            let arr=str.split('=');\n            params[arr[0]]=isNaN(arr[1])?arr[1]:Number(arr[1]);\n        }\n        return params;\n    }\n")])])]),t("p",[n._v("完整版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function parseParam(url) {\n        const paramsStr = /.+\\?(.+)$/.exec(url)[1]; \n        const paramsArr = paramsStr.split('&'); \n        let paramsObj = {};\n        paramsArr.forEach(param => {\n            if (/=/.test(param)) { \n                let [key, val] = param.split('='); \n                val = decodeURIComponent(val); \n                val = /^\\d+$/.test(val) ? parseFloat(val) : val; \n\n                if (paramsObj.hasOwnProperty(key)) { \n                    paramsObj[key] = [].concat(paramsObj[key], val);\n                } else { \n                    paramsObj[key] = val;\n                }\n            } else { \n                paramsObj[param] = true;\n            }\n        })\n        return paramsObj;\n    }\n")])])]),t("p",[n._v("考虑深度集合")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function parse(str){\n    return str.split('&').reduce((o,kv)=>{\n        const [key,value]=kv.split('=');\n        if(!value){\n            return o\n        }\n        deep_set(o,key.split(/[\\[\\]]/g).filter(x=>x),value);\n        return o\n    },{})\n}\nfunction deep_set(o,path,value){\n    let i=0;\n    for(;i<path.length-1;i++){\n        if(o[path[i]]===undefined){\n            if(path[i+1].match(/^\\d+$/)){\n                o[path[i]]=[]\n            }else{\n                o[path[i]]={}\n            }\n        }\n        o=o[path[i]]\n    }\n    o[path[i]]=decodeURIComponent(value)\n}\n")])])]),t("h3",{attrs:{id:"为普通对象添加迭代属性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为普通对象添加迭代属性"}},[n._v("#")]),n._v(" 为普通对象添加迭代属性")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let obj={};\n    Object.defineProperty(obj,Symbol.iterator,{\n        enumerable:false,\n        writable:false,\n        configurable:true,\n        value:function(){\n            let o=this;\n            let idx=0;\n            let ks=Object.keys(o);\n            return {\n                next:function(){\n                    return {\n                        value:o[ks[idx++]],\n                        done:(idx>ks.length)\n                    }\n                }\n            }\n        }\n    })   \n")])])]),t("h3",{attrs:{id:"输出字符串中字符的个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#输出字符串中字符的个数"}},[n._v("#")]),n._v(" 输出字符串中字符的个数")]),n._v(" "),t("p",[n._v("推荐")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let str='helloworld';\n    let dict={};\n    for(let i=0;i<str.length;i++){\n        if(dict[str[i]]===undefined){\n            dict[str[i]]=1;\n        }else{\n            dict[str[i]]+=1;\n        }\n    }\n")])])]),t("h3",{attrs:{id:"编写一个方法-求一个字符串的字节长度"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#编写一个方法-求一个字符串的字节长度"}},[n._v("#")]),n._v(" 编写一个方法 求一个字符串的字节长度")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function GetBytes(str){\n        var len = str.length;\n        var bytes = len;\n        for(var i=0; i<len; i++){\n            if (str.charCodeAt(i) > 255) bytes++;\n        }\n        return bytes;\n    }\n")])])]),t("h3",{attrs:{id:"查找字符串中出现最多的字符和个数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找字符串中出现最多的字符和个数"}},[n._v("#")]),n._v(" 查找字符串中出现最多的字符和个数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let str = \"abcabcabcbbccccc\";\n    let num = 0;\n    let char = '';\n\n    str = str.split('').sort().join('');\n\n    let re = /(\\w)\\1+/g;\n    str.replace(re,($0,$1) => {\n        if(num < $0.length){\n            num = $0.length;\n            char = $1;        \n        }\n    });\n    console.log(`字符最多的是${char}，出现了${num}次`);\n")])])]),t("h3",{attrs:{id:"字符串查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#字符串查找"}},[n._v("#")]),n._v(" 字符串查找")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    a='34';b='1234567'; // 返回 2\n    a='35';b='1234567'; // 返回 -1\n    a='355';b='12354355'; // 返回 5\n    isContain(a,b);\n    function isContain(a, b) {\n        for (let i in b) {\n            if (a[0] === b[i]) {\n                let tmp = true;\n                for (let j in a) {\n                    if (a[j] !== b[~~i + ~~j]) {\n                    tmp = false;\n                    }\n                }\n                if (tmp) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n")])])]),t("h3",{attrs:{id:"实现字符串翻转"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现字符串翻转"}},[n._v("#")]),n._v(" 实现字符串翻转")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var arr=str.split('');\n    var newArr=[];\n    for(var i=0;i<arr.length;i++){\n        newArr[i]=arr[arr.length-i-1];\n    }\n    var newStr=newArr.join('')\n    console.log(str0);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var newStr='';\n    for(var i=0;i<str.length;i++){\n        newStr+=str.charAt(str.length-i-1);\n    }\n    console.log(newStr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    var newStr=str.split("").reverse().join("");\n    console.log(newStr);\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var arr=str.split('');\n    var obj=Array.from(new Set([...arr]));\n    var newStr='';\n    for(i of obj){\n        newStr+=obj[arr.length-i];\n    }\n    console.log(newStr)\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var arr=str.split('');\n    var newArr=[];\n    while(arr.length>0){\n        newArr.push(arr.pop())\n    };\n    var newStr=newArr.join(\"\");\n    console.log(newStr)\n")])])]),t("h3",{attrs:{id:"实现字符串的散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现字符串的散列函数"}},[n._v("#")]),n._v(" 实现字符串的散列函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function h_str(str,M){\n        return [...str].reduce((hash,c)=>{\n            hash=(31*hash+c.charCodeAt(0))%M\n            return hash\n        },0)\n    }\n")])])]),t("h3",{attrs:{id:"实现数组去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现数组去重"}},[n._v("#")]),n._v(" 实现数组去重")]),n._v(" "),t("p",[n._v("推荐")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let dict={},\n        result=[],\n        j=0;\n\n    for(let i=0;i<arr.length;i++){\n        dict[arr[i]]=1;\n    }\n\n    for(result[j++] in dict);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var newArr=Array.from(new Set(arr));\n    console.log(newArr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    for(var i=0;i<arr.length;i++){\n        for(j=i+1;j<arr.length;j++){\n            if(arr[i]==arr[j]){\n                arr.splice(j,1);\n                j--;\n            }\n        }\n    }\n    console.log(arr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var newArr=[];\n    for(var i=0;i<arr.length;i++){\n        if(newArr.indexOf(arr[i])===-1){\n            newArr.push(arr[i])\n        }\n    }\n    console.log(newArr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var arr=arr.sort();\n    var newArr=[arr[0]];\n    for(var i=1;i<arr.length;i++){\n        if(arr[i]!==arr[i-1]){\n            newArr.push(arr[i])\n        }\n    }\n    console.log(newArr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var newArr=[];\n    var obj={};\n    for(var i=0;i<arr.length;i++){\n        if(!obj[arr[i]]){\n            newArr.push(arr[i]);\n            obj[arr[i]]=1\n        }else{\n            obj[arr[i]]++\n        }\n    }\n    console.log(newArr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var newArr=[];\n    for(var i=0;i<arr.length;i++){\n        if(!newArr.includes(arr[i])){//检测数组是否有某个值\n            newArr.push(arr[i]);\n        }\n    }\n    console.log(newArr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var obj={};\n    var newArr=arr.filter((item,index,arr)=>{\n        return obj.hasOwnProperty(typeof item+item)?false:(obj[typeof item+item]=true)\n    })\n    console.log(arrM6);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    arr.sort(function(a,b){\n        return a-b;\n    })\n    function loop(index){\n        if(index>=1){\n            if(arr[index]===arr[index-1]){\n                arr.splice(index,1);\n            }\n            loop(index-1)\n        }\n    }\n    loop(arr.length-1);\n    console.log(arr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    var map=new Map();\n    var newArr=[];\n    for(var i=0;i<arr.length;i++){\n        if(map.has(arr[i])){\n            map.set(arr[i],true);\n        }else{\n            map.set(arr[i],false);\n            newArr.push(arr[i]);\n        }\n    }\n    console.log(newArr);\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    arr=arr.reduce((prev,cur)=>prev.includes(cur)?prev:[...prev,cur],[]);\n    console.log(arr);\n    ```\n\n    ```\n    var newArr=[...new Set(arr)];\n    console.log(newArr);\n")])])]),t("h3",{attrs:{id:"实现合成函数compose"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现合成函数compose"}},[n._v("#")]),n._v(" 实现合成函数compose")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const compose =(...args)=>args.reduce((prev,current)=>(...values)=>prev(current(...values)));\n")])])]),t("h3",{attrs:{id:"实现旋转数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现旋转数组"}},[n._v("#")]),n._v(" 实现旋转数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function rotate(nums, k) {\n    for (let i = 0;i < k; i++) {\n    nums.unshift(nums.pop());\n  }\n};\n")])])]),t("h3",{attrs:{id:"实现浮点数的散列函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现浮点数的散列函数"}},[n._v("#")]),n._v(" 实现浮点数的散列函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function binary_value(val){\n        const farr=new Float32Array(1)\n        farr[0]=val\n        const intBytes=new Int8Array(farr.buffer)\n        const view=new DataView(intBytes.buffer)\n        return view.getUnit32()\n    }\n    k=>binary_value(k)%M\n")])])]),t("h3",{attrs:{id:"实现千位分隔符"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现千位分隔符"}},[n._v("#")]),n._v(" 实现千位分隔符")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function parseToMoney(num) {\n        num = parseFloat(num.toFixed(3));\n        let [integer, decimal] = String.prototype.split.call(num, '.');\n        integer = integer.replace(/\\d(?=(\\d{3})+$)/g, '$&,');\n        return integer + '.' + (decimal ? decimal : '');\n    }\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function parseToMoney(str){\n        let re = /(?=(?!\\b)(\\d{3})+$)/g; \n        return str.replace(re,','); \n    }\n")])])]),t("h3",{attrs:{id:"判断是否是电话号码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断是否是电话号码"}},[n._v("#")]),n._v(" 判断是否是电话号码")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function isPhone(tel) {\n        var regx = /^1[34578]\\d{9}$/;\n        return regx.test(tel);\n    }\n")])])]),t("h3",{attrs:{id:"验证是否是邮箱"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证是否是邮箱"}},[n._v("#")]),n._v(" 验证是否是邮箱")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function isEmail(email) {\n        var regx = /^([a-zA-Z0-9_\\-])+@([a-zA-Z0-9_\\-])+(\\.[a-zA-Z0-9_\\-])+$/;\n        return regx.test(email);\n    }\n")])])]),t("h3",{attrs:{id:"验证是否是身份证"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#验证是否是身份证"}},[n._v("#")]),n._v(" 验证是否是身份证")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function isCardNo(number) {\n        var regx = /(^\\d{15}$)|(^\\d{18}$)|(^\\d{17}(\\d|X|x)$)/;\n        return regx.test(number);\n    }\n")])])]),t("h3",{attrs:{id:"实现一个函数柯里化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个函数柯里化"}},[n._v("#")]),n._v(" 实现一个函数柯里化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const curry=(fn,arr=[])=>(...args)=>(\n        arg=>arg.length===fn.length\n            ? fn(...arg)\n            : curry(fn,arg)\n    )([...arr,...args])\n")])])]),t("h3",{attrs:{id:"实现一个函数反柯里化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个函数反柯里化"}},[n._v("#")]),n._v(" 实现一个函数反柯里化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const unCurrying=(fn)=>{\n        return (...args)=>{\n            return fn.call(...args);\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现数组扁平化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现数组扁平化"}},[n._v("#")]),n._v(" 实现数组扁平化")]),n._v(" "),t("p",[n._v("递归")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function flatten(arr){\n        return [].concat(\n            ...arr.map(x=>Array.isArray(x)?flatten(x):x)\n        )\n    }\n")])])]),t("p",[n._v("递归，可以用for去展平拿到想要的第几项，可以忽略后续的非展平项，保证性能")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function *flatten(arr){\n        for(let i=0;i<arr.length;i++){\n            if(Array.isArray(arr[i])){\n                yield * flatten(arr[i])\n            }else{\n                yield arr[i]\n            }\n        }\n    }\n")])])]),t("p",[n._v("堆栈实现非递归")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function *flatten(arr){\n        let stack=arr.slice.reverse();\n        while(stack.length){\n            const item=stack.pop();\n            if(item.constructor===Array){\n                stack=stack.concat(item)\n            }else{\n                yield item\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"判断是否是回文数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断是否是回文数"}},[n._v("#")]),n._v(" 判断是否是回文数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function isPalindrome(str) {\n    str = str.replace(/\\W/g, '').toLowerCase();\n    return (str == str.split('').reverse().join(''));\n}\n")])])]),t("h3",{attrs:{id:"实现isarray-方法-判断是否为数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现isarray-方法-判断是否为数组"}},[n._v("#")]),n._v(" 实现isArray()方法 判断是否为数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    Array.myIsArray=function(o){\n        return Object.prototype.toString.call(Object(o)) === '[object Array]'\n    }\n")])])]),t("h3",{attrs:{id:"实现iscontain-方法，判断是否包含该字符串"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现iscontain-方法，判断是否包含该字符串"}},[n._v("#")]),n._v(" 实现isContain()方法，判断是否包含该字符串")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function isContain(a, b) {\n        for (let i in b) {\n            if (a[0] === b[i]) {\n            let tmp = true;\n            for (let j in a) {\n                if (a[j] !== b[~~i + ~~j]) {\n                tmp = false;\n                }\n            }\n            if (tmp) {\n                return i;\n            }\n            }\n        }\n        return -1;\n    }\n")])])]),t("h3",{attrs:{id:"实现isnegzero函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现isnegzero函数"}},[n._v("#")]),n._v(" 实现isNegZero函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function isNegZero(n){\n        n=Number(n);\n        return (n === n) && (1/n === -Infinity)\n    }\n")])])]),t("h3",{attrs:{id:"实现object-is-函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现object-is-函数"}},[n._v("#")]),n._v(" 实现Object.is()函数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    Object.is=function(v1,v2){\n        if(v1===0 && v2===0){\n            return 1/v1 === 1/v2;\n        }\n        if(v1!==v1){\n            return v2!==v2;\n        }\n        return v1 === v2;\n    }\n")])])]),t("h2",{attrs:{id:"原理部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#原理部分"}},[n._v("#")]),n._v(" 原理部分")]),n._v(" "),t("h3",{attrs:{id:"实现event-event-bus"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现event-event-bus"}},[n._v("#")]),n._v(" 实现Event(event bus)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    class EventEmitter {\n        constructor() {\n            this._events = this._events || new Map(); \n            this._maxListeners = this._maxListeners || 10; \n        }\n    }\n\n    EventEmitter.prototype.emit = function(type, ...args) {\n        let handler;\n        handler = this._events.get(type);\n        if (args.length > 0) {\n            handler.apply(this, args);\n        } else {\n            handler.call(this);\n        }\n        return true;\n    };\n\n    EventEmitter.prototype.addListener = function(type, fn) {\n        if (!this._events.get(type)) {\n            this._events.set(type, fn);\n        }\n    };\n\n    EventEmitter.prototype.emit = function(type, ...args) {\n        let handler;\n        handler = this._events.get(type);\n        if (Array.isArray(handler)) {\n            for (let i = 0; i < handler.length; i++) {\n                if (args.length > 0) {\n                    handler[i].apply(this, args);\n                } else {\n                    handler[i].call(this);\n                }\n            }\n        } else {\n            if (args.length > 0) {\n                handler.apply(this, args);\n            } else {\n                handler.call(this);\n            }\n        }\n        return true;\n    };\n\n    EventEmitter.prototype.addListener = function(type, fn) {\n        const handler = this._events.get(type); \n        if (!handler) {\n            this._events.set(type, fn);\n        } else if (handler && typeof handler === "function") {\n            this._events.set(type, [handler, fn]); \n        } else {\n            handler.push(fn); \n        }\n    };\n\n    EventEmitter.prototype.removeListener = function(type, fn) {\n        const handler = this._events.get(type); \n\n        if (handler && typeof handler === "function") {\n            this._events.delete(type, fn);\n        } else {\n            let position;\n            for (let i = 0; i < handler.length; i++) {\n                if (handler[i] === fn) {\n                    position = i;\n                } else {\n                    position = -1;\n                }\n            }\n\n            if (position !== -1) {\n                handler.splice(position, 1);\n                if (handler.length === 1) {\n                    this._events.set(type, handler[0]);\n                }\n            } else {\n                return this;\n            }\n        }\n    };\n')])])]),t("p",[n._v("简版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class EventEmitter{\n        constructor(){\n            this._events={};\n        }\n        on(type,listener){\n            let listeners=this._events[type];\n            if(listeners){\n                listeners.push(listener)\n            }else{\n                this._events[type]=[listener];\n            }\n        }\n        emit(type){\n            let listeners=this._events[type];\n            let args=Array.from(arguments).slice(1);\n            listeners.forEach(listener=>listener(...args));\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现一个writable-stream"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个writable-stream"}},[n._v("#")]),n._v(" 实现一个Writable Stream?")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var Writable = require('stream').Writable;\nvar util = require('util');\n\nfunction MyWritable(options) {\n\tWritable.call(this, options);\n} // 构造函数\nutil.inherits(MyWritable, Writable); // 继承自Writable\nMyWritable.prototype._write = function(chunk, encoding, callback) {\n\tconsole.log(\"被写入的数据是:\", chunk.toString()); // 此处可对写入的数据进行处理\n\tcallback();\n};\n\nprocess.stdin.pipe(new MyWritable()); // stdin作为输入源，MyWritable作为输出源  \n")])])]),t("h3",{attrs:{id:"实现instanceof"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现instanceof"}},[n._v("#")]),n._v(" 实现instanceOf")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function instance_of(L, R) {\n        var O = R.prototype; \n        L = L.__proto__; \n        while (true) {\n            if (L === null) return false;\n            if (O === L)\n            return true;\n            L = L.__proto__;\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现一个new"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个new"}},[n._v("#")]),n._v(" 实现一个new")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function _new(P){\n        let o={};\n        let arg=Array.prototype.slice.call(arguments,1);\n        o.__proto__=P.prototype;\n        P.apply(o,arg);\n        return o;\n    }\n")])])]),t("h3",{attrs:{id:"实现一个const"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个const"}},[n._v("#")]),n._v(" 实现一个const")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var __const = function __const (data, value) {\n    window.data = value \n    Object.defineProperty(window, data, { \n        enumerable: false,\n        configurable: false,\n        get: function () {\n            return value\n        },\n        set: function (data) {\n            if (data !== value) { \n                throw new TypeError('Assignment to constant variable.')\n            } else {\n                return value\n            }\n        }\n    })\n}\n")])])]),t("h3",{attrs:{id:"实现一个extends"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个extends"}},[n._v("#")]),n._v(" 实现一个extends")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function myExtends(sourceObj,targetObj){\n        for(let key in sourceObj){\n            if(!(key in targetObj)){\n                targetObj[key]=sourceObj[key];\n            }\n        }\n        return targetObj;\n    }\n")])])]),t("h3",{attrs:{id:"实现一个call"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个call"}},[n._v("#")]),n._v(" 实现一个call")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    Function.prototype.myCall = function(context) {\n        context.fn = this;\n        let args = [];\n        for (let i = 1, len = arguments.length; i < len; i++) {\n            args.push(arguments[i]);\n        }\n        context.fn(...args);\n        let result = context.fn(...args);\n        delete context.fn;\n        return result;\n    };\n")])])]),t("h3",{attrs:{id:"实现一个apply"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个apply"}},[n._v("#")]),n._v(" 实现一个apply")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    Function.prototype.myapply = function(context, arr) {\n        var context = Object(context) || window;\n        context.fn = this;\n\n        var result;\n        if (!arr) {\n            result = context.fn();\n        } else {\n            var args = [];\n            for (var i = 0, len = arr.length; i < len; i++) {\n                args.push("arr[" + i + "]");\n            }\n            result = eval("context.fn(" + args + ")");\n        }\n\n        delete context.fn;\n        return result;\n    };\n')])])]),t("h3",{attrs:{id:"实现bind"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现bind"}},[n._v("#")]),n._v(" 实现bind")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    if (!Function.prototype.bind) {\n        Function.prototype.bind = function(oThis) {\n            if (typeof this !== 'function') {\n                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\n            }\n\n            var aArgs   = Array.prototype.slice.call(arguments, 1),\n                fToBind = this,\n                fNOP    = function() {},\n                fBound  = function() {\n                return fToBind.apply(this instanceof fBound\n                        ? this\n                        : oThis,\n                        aArgs.concat(Array.prototype.slice.call(arguments)));\n                };\n\n            if (this.prototype) {\n                fNOP.prototype = this.prototype; \n            }\n\n            fBound.prototype = new fNOP();\n\n            return fBound;\n        };\n    }\n")])])]),t("h3",{attrs:{id:"模拟object-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#模拟object-create"}},[n._v("#")]),n._v(" 模拟Object.create")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function create(proto) {\n  function F() {}\n  F.prototype = proto;\n\n  return new F();\n}\n")])])]),t("h3",{attrs:{id:"实现一个软绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个软绑定"}},[n._v("#")]),n._v(" 实现一个软绑定")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    if(!Function.prototype.softBind){\n        Function.prototype.softBind=function(obj){\n            let fn=this;\n            let curried=[].slice.call(arguments,1);\n            let bound=function(){\n                return fn.apply(\n                    (!this || this===(window || global))?obj:this,\n                      curried.concat.apply(curried,arguments)    \n                );\n            };\n            bound.prototype=Object.create(fn.prototype);\n            return bound;\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现super关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现super关键字"}},[n._v("#")]),n._v(" 实现super关键字")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("Object.prototype.mysuper = function(){\n    var caller = arguments.callee.caller,\n        name;\n    for(var i in this){\n        if(this[i] === caller){\n            name = i;\n            break;\n        }\n    }\n    __proto = this.__proto__ || this.constructor.prototype;\n    try{\n        return __proto[name].apply(this, arguments);\n    }catch(e){\n        alert(name + ' is undefined.');\n    }\n}\n")])])]),t("h3",{attrs:{id:"实现object-create"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现object-create"}},[n._v("#")]),n._v(" 实现Object.create()")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function create(proto) {\n        function F() {}\n        F.prototype = proto;\n        return new F();\n    }\n")])])]),t("h3",{attrs:{id:"实现类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现类的继承"}},[n._v("#")]),n._v(" 实现类的继承")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function Parent(name) {\n        this.parent = name\n    }\n    Parent.prototype.say = function() {\n        console.log(`${this.parent}: 你打篮球的样子像kunkun`)\n    }\n    function Child(name, parent) {\n        Parent.call(this, parent)\n        this.child = name\n    }\n\n    Child.prototype = Object.create(Parent.prototype);\n    Child.prototype.say = function() {\n        console.log(`${this.parent}好，我是练习时长两年半的${this.child}`);\n    }\n\n    Child.prototype.constructor = Child;\n\n    var parent = new Parent('father');\n    parent.say();\n\n    var child = new Child('cxk', 'father');\n    child.say();\n")])])]),t("h3",{attrs:{id:"实现rem原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现rem原理"}},[n._v("#")]),n._v(" 实现rem原理")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function setRem(){\n        let doc=document.documentElement;\n        let width=doc.getBoundingClientRect().width;\n        let rem=width/75;\n        doc.style.fontSize=rem+'px'\n    }\n    addEventListener('resize',setRem)\n")])])]),t("h3",{attrs:{id:"实现一个双向数据绑定"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个双向数据绑定"}},[n._v("#")]),n._v(" 实现一个双向数据绑定")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let arrayProto=Array.prototype;\n    let proto=Object.create(arrayProto);\n    ['push','unshift','splice','reverse','sort','shift','pop'].forEach(method=>{\n        proto[method]=function(...args){\n            let inserted;\n            switch(method){\n                case 'push':\n                case 'unshift':\n                    inserted=args\n                    break;\n                case 'splice':\n                    inserted = args.slice(2);\n                default:\n                    break;\n            }\n            ArrayObserver(inserted);\n            arrayProto[method].call(this,...args)\n        }\n    })\n    function ArrayObserver(obj){\n        for(let i=0;i<obj.length;i++){\n            let item=obj[i];\n            observer(item);\n        }\n    }\n    function observer(obj){\n        if(typeof obj !== 'object' || obj == null){\n            return obj;\n        }\n        if(Array.isArray(obj)){\n            Object.setPrototypeOf(obj,proto)\n            ArrayObserver(obj);\n        }else{\n            for (let key in obj){\n                defineReactive(obj,key,obj[key])\n            }\n        }\n    }\n    function defineReactive(obj,key,value){\n        observer(value); // 递归创建\n        get(){\n            return value;\n        },\n        set(newValue){\n            if(value!==newValue){\n                observer(newValue);\n                value=newValue;\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现commonjs模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现commonjs模块化"}},[n._v("#")]),n._v(" 实现CommonJS模块化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const path=require('path');\nconst fs=require('fs');\nconst vm=require('vm');\nfunction Module(id){\n    this.id=id;\n    this.exports={};//模块的结果\n}\nModule.wrapper=[\n    '(function(exports,module,require,__filename,__dirname){'\n    ,\n    '})'\n]\n//静态方法\nModule._extensions={\n    '.js'(module){//js需要将exports传给用户 用户自己解析\n        let script=fs.readFileSync(module.id,'utf8');\n        let fnStr=Module.wrapper[0]+script+Module.wrapper[1];\n        let fn=vm.runInThisContext(fnStr);//让字符串执行js代码\n        //第一个参数改变this指向 module module.exports\n        fn.call(module.exports,module,module.exports,req,module.id,path.dirname(module.id));\n    },\n    '.json'(module){\n        let script=fs.readFileSync(module.id,'utf8');\n        module.exports=JSON.parse(script)\n    }\n}\n//给你一个相对路径 解析成绝对路径\nModule.resolveFileName=function(filename){\n    // 1) 把相对路径转化为绝对路径 默认会先判断一下是否是绝对路径\n    let absPath=path.resolve(__dirname,filename);\n    let flag=fs.existsSync(absPath);//判断文件是否存在 异步方法被废弃\n    let current=absPath; //默认是当前路径\n    if(!flag){\n        let keys=Object.keys(Module._extensions);\n        for(let i=0;i<keys.length;i++){\n            current=absPath+keys[i];//当前找到的文件路径\n            flag=fs.existsSync(current);\n            if(flag){\n                break;\n            }else{\n                current=null;\n            }\n        }\n    }\n    if(!current){ // 如果没有 说明加了后缀文件还是不存在\n        throw new Error('文件不存在')\n    }\n    return current;\n}\nModule.prototype.load=function(){\n    //模块加载就是读取文件的内容\n    let ext =path.extname(this.id);\n    Module._extensions[ext](this);//根据不同的路径处理不同的方法\n}\nModule._cache={};\nfunction req(filename){\n    //自己实现了一个require方法\n    let current=Module.resolveFileName(filename);\n    if(Module._cache[current]){\n        return Module._cache[current].exports;\n    }\n    let module=new Module(current);\n    Module._cache[current]=module;\n    module.load();\n    return module.exports;\n}\n")])])]),t("h3",{attrs:{id:"实现jwt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现jwt"}},[n._v("#")]),n._v(" 实现jwt")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("const crypto = require('crypto');\nfunction encode(payload, key) {\n    let header = { type: 'JWT', alg: 'sha256' };//声明类型和算法\n    var segments = [];//声明一个数组\n    segments.push(base64urlEncode(JSON.stringify(header)));//对header进行base64\n    segments.push(base64urlEncode(JSON.stringify(payload)));//对负载进行base64\n    segments.push(sign(segments.join('.'), key));//加入签名\n    return segments.join('.');\n}\nfunction sign(input, key) {\n    return crypto.createHmac('sha256', key).update(input).digest('base64');\n}\n\n\nfunction decode(token, key) {\n    var segments = token.split('.');\n    var headerSeg = segments[0];\n    var payloadSeg = segments[1];\n    var signatureSeg = segments[2];\n\n    var header = JSON.parse(base64urlDecode(headerSeg));\n    var payload = JSON.parse(base64urlDecode(payloadSeg));\n\n    if (signatureSeg != sign([headerSeg, payloadSeg].join('.'), key)) {\n        throw new Error('verify failed');\n    }\n\n    if (payload.exp && Date.now() > payload.exp * 1000) {\n        throw new Error('Token expired');\n    }\n    return payload;\n}\n\nfunction base64urlEncode(str) {\n    return new Buffer(str).toString('base64');\n}\n\nfunction base64urlDecode(str) {\n    return new Buffer(str, 'base64').toString();\n}\n\nmodule.exports = {\n    encode,\n    decode\n}\n")])])]),t("h3",{attrs:{id:"实现redux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现redux"}},[n._v("#")]),n._v(" 实现Redux")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // bindActionCreator\n    export default function bindActionCreator(actions,dispatch){\n        let newActions={};\n        for(let key in actions){\n            newActions[key]=()=>dispatch(actions[key].apply(null,arguments));\n        }\n        return newActions;\n    }\n    // combineReducers\n    export default combineReducers=reducers=>(state={},action)=>Object.keys(reducers).reduce((currentState,key)=>{\n        currentState[key]=reducers[key](state[key],action);\n        return currentState;\n    },{});\n    // createStore\n    export default function createStore(reducer,enhancer){\n        if(typeof enhancer !== 'undefined'){\n            return enhancer(createStore)(reducer);\n        }\n        let state=null;\n        const listeners=[];\n        const subscribe=(listener)=>{\n            listeners.push(listener);\n        }\n        const getState=()=>state;\n        const dispatch=(action)=>{\n            state=reducer(state,action);\n            listeners.forEach((listener)=>listener())\n        };\n        dispatch({});\n        return {getState,dispatch,subscribe}\n    }\n    // applyMiddleware\n    export default function applyMiddleware(...middlewares){\n        return (createStore)=>(reducer)=>{\n            const store=createStore(reducer);\n            let dispatch=store.dispatch;\n            let chain=[];\n\n            const middlewareAPI={\n                getState:store.getState,\n                dispatch:(action)=>dispatch(action)\n            }\n            chain=middlewares.map(middleware=>middleware(middlewareAPI));\n            dispatch=compose(...chain)(store.dispatch);\n\n            return {\n                ...store,\n                dispatch\n            }\n        }\n    }\n    // compose\n    export default function compose(...funcs){\n        return funcs.reduce((a,b)=>(...args)=>a(b(...args)));\n    }\n")])])]),t("h3",{attrs:{id:"实现一个简单路由"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个简单路由"}},[n._v("#")]),n._v(" 实现一个简单路由")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class Route{\n        constructor(){\n            this.routes={};\n            this.currentHash='';\n            this.freshRoute=this.freshRoute.bind(this);\n            window.addEventListener('load',this.freshRoute,false);\n            window.addEventListener('hashchange',this.freshRoute,false);\n        }\n        storeRoute(path,cb){\n            this.routes[path]=cb || function(){}\n        }\n        freshRoute(){\n            this.currentHash=location.hash.slice(1) || '/';\n            this.routes[this.currentHash]()\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现promise"}},[n._v("#")]),n._v(" 实现Promise")]),n._v(" "),t("p",[n._v("完整版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const PENDING='pending';\n    const FULFILLED='fulfilled';\n    const REJECTED='rejected';\n\n    function MyPromise(fn){\n        const self=this;\n        self.value=null;\n        self.error=null;\n        self.status=PENDING;\n        self.onFulfilledCallbacks=[];\n        self.onRejectedCallbacks=[];\n\n        function resolve(value){\n            if(value instanceof MyPromise){\n                return value.then(resolve,reject);\n            }\n            if(self.status===PENDING){\n                setTimeout(()=>{\n                    self.status=FULFILLED;\n                    self.value=value;\n                    self.onFulfilledCallbacks.forEach((callback)=>callback(self.value));\n                },0)\n            }\n        }\n\n        function reject(error){\n            if(self.status===PENDING){\n                setTimeout(function(){\n                    self.status=REJECTED;\n                    self.error=error;\n                    self.onRejectedCallbacks.forEach((callback)=>callback(self.error))\n                },0)\n            }\n        }\n        try{\n            fn(resolve,reject);\n        }catch(e){\n            reject(e);\n        }\n    }\n\n    function resolvePromise(bridgepromise,x,resolve,reject){\n        if(bridgepromise===x){\n            return reject(new TypeError('Circular reference'));\n        }\n\n        let called=false;\n        if(x instanceof MyPromise){\n            if(x.status===PENDING){\n                x.then(y=>{\n                    resolvePromise(bridgepromise,y,resolve,reject)\n                },error=>{\n                    reject(error);\n                })\n            }else{\n                x.then(resolve,reject)\n            }\n        }else if(x!=null && ((typeof x === 'object') || (typeof x === 'function'))){\n            try{\n                let then=x.then;\n                if(typeof then === 'function'){\n                    then.call(x,y=>{\n                        if(called) return;\n                        called=true;\n                        resolvePromise(bridgepromise,y,resolve,reject)\n                    },error=>{\n                        if(called) return;\n                        called=true;\n                        reject(error);\n                    })\n                }else{\n                    resolve(x);\n                }\n            }catch(e){\n                if(called) return;\n                called=true;\n                reject(e);\n            }\n        }else{\n            resolve(x);\n        }\n    }\n\n    MyPromise.prototype.then=function(onFulfilled,onRejected){\n        const self=this;\n        let bridgePromise;\n        onFulfilled=typeof onFulfilled==='function'?onFulfilled:value=>value;\n        onRejected=typeof onRejected==='function'?onRejected:error=>{throw error};\n        if(self.status===FULFILLED){\n            return bridgePromise=new MyPromise((resolve,reject)=>{\n                setTimeout(()=>{\n                    try{\n                        let x=onFulfilled(self.value);\n                        resolvePromise(bridgePromise,x,resolve,reject);\n                    }catch(e){\n                        reject(e);\n                    }\n                },0)\n            })\n        }\n        if(self.status===REJECTED){\n            return bridgePromise=new MyPromise((resolve,reject)=>{\n                setTimeout(()=>{\n                    try{\n                        let x=onRejected(self.error);\n                        resolvePromise(bridgePromise,x,resolve,reject);\n                    }catch(e){\n                        reject(e);\n                    }\n                },0)\n            })\n        }\n        if(self.status===PENDING){\n            return bridgePromise=new MyPromise((resolve,reject)=>{\n                self.onFulfilledCallbacks.push((value)=>{\n                    try{\n                        let x=onFulfilled(value);\n                        resolvePromise(bridgePromise,x,resolve,reject)\n                    }catch(e){\n                        reject(e);\n                    }\n                });\n                self.onRejectedCallbacks.push((error)=>{\n                    try{\n                        let x=onRejected(error);\n                        resolvePromise(bridgePromise,x,resolve,reject);\n                    }catch(e){\n                        reject(e);\n                    }\n                });\n            });\n        }\n    }\n    MyPromise.prototype.catch=function(onRejected){\n        return this.then(null,onRejected);\n    }\n    MyPromise.deferred=function(){\n        let defer={};\n        defer.promise=new MyPromise((resolve,reject)=>{\n            defer.resolve=resolve;\n            defer.reject=reject;\n        });\n        return defer;\n    }\n    try{\n        module.exports=MyPromise;\n    }catch(e){}\n")])])]),t("p",[n._v("简版")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function myPromise(constructor){\n        let self=this;\n        self.status='pending';\n        self.vlaue=undefined;\n        self.reason=undefined;\n        function resolve(value){\n            if(self.status==='pending'){\n                self.value=value;\n                self.status='resolved';\n            }\n        }\n        function reject(reason){\n            if(self.status==='pending'){\n                self.reason=reason;\n                self.status='rejected';\n            }\n        }\n        try{\n            constructor(resolve,reject);\n        }catch(e){\n            reject(e);\n        }\n    }\n    myPromise.prototype.then=function(onFullfilled,onRejected){\n        let self=this;\n        switch(self.status){\n            case 'resolved':\n                onFullfilled(self.value);\n                break;\n            case 'rejected':\n                onRejected(self.reason);\n                break;\n            default:\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现promise的生成器run方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现promise的生成器run方法"}},[n._v("#")]),n._v(" 实现promise的生成器run方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function run(gen){\n        let args=[].slice.call(arguments,1),\n            it;\n        it=gen.apply(this,args);\n\n        return Promise.resolve().then(function handleNext(value){\n            let next =it.next(value);\n\n            return (function handleResult(next){\n                if(next.done){\n                    return next.value;\n                }else{\n                    return Promise.resolve(next.value).then(\n                        handleNext,\n                        function handleErr(err){\n                            return Promise.resolve(\n                                if.throw(err)\n                            ).then(handleResult);\n                        }\n                    );\n                }\n            })(next);\n        })\n    }\n")])])]),t("h3",{attrs:{id:"实现promisify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现promisify"}},[n._v("#")]),n._v(" 实现promisify")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function promisify(fn){\n        return function(...args){\n            return new Promise(function(resolve,reject){\n                fn(...args,function(err,data){\n                    if(err){\n                        reject(err)\n                    }else{\n                        resolve(data);\n                    }\n                };\n            });\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现thunkify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现thunkify"}},[n._v("#")]),n._v(" 实现thunkify")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function thunkify(fn){\n        let args=[].slice.call(arguments,1);\n        return function(cb){\n            args.push(cb);\n            return fn.apply(null,args);\n        }\n    }\n")])])]),t("h3",{attrs:{id:"使用settimeout实现setinterval"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用settimeout实现setinterval"}},[n._v("#")]),n._v(" 使用setTimeout实现setInterval")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    setTimeout(function(){\n        setTimeout(arguments.callee,500)\n    },500)\n")])])]),t("h3",{attrs:{id:"实现json-parse"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现json-parse"}},[n._v("#")]),n._v(" 实现JSON.parse")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    var json = \'{"name":"cxk", "age":25}\';\n    var obj = eval("(" + json + ")");\n')])])]),t("h3",{attrs:{id:"实现json-stringify"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现json-stringify"}},[n._v("#")]),n._v(" 实现JSON.stringify")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function jsonStringify(obj){\n        let type=typeof obj;\n        if(type !== 'object' || type === null){\n            if(/string|undefined|function/.test(type)){\n                obj='\"'+obj+'\"';\n            }\n            return String(obj);\n        }else{\n            let json=[];\n            arr=(obj && obj.constructor===Array);\n            for(let k in obj){\n                let v=obj[k];\n                let type=typeof v;\n                if(/string|undefined|function/.test(type)){\n                    v='\"'+v+'\"';\n                }else if(type === 'object'){\n                    v=jsonStringify(v);\n                }\n                json.push((arr ? \"\":'\"'+k'\":')+String(v));\n            }\n            return (arr ? \"[\" : \"{\" ) + String(json)+(arr ? \"]\" : \"}\" )\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现indexof方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现indexof方法"}},[n._v("#")]),n._v(" 实现indexOf方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function indexOf(arr,elem,fromi){\n        fromi=fromi||0;\n        for(var i=fromi;i<arr.length;i++){\n            if(elem===arr[i]){\n                return i;\n            }\n        }\n    return -1;\n    }\n")])])]),t("h3",{attrs:{id:"实现reduce方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现reduce方法"}},[n._v("#")]),n._v(" 实现reduce方法")]),n._v(" "),t("p",[n._v("简版：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    Array.prototype.myReduce=function(fn,initialValue){\n        if(this.length===0){\n            if(initialValue===undefined){\n                console.error("reduce of empty array with no initialValue")\n            }else{\n                return initialValue\n            }\n        }else{\n            let prev=initialValue !== undefined ? initialValue : this[0];\n            let startIndex = initialValue !== undefined ? 0 : 1;\n            for(let i=startIndex;i<this.length;i++){\n                prev = fn(prev,this[i]);\n            }\n            return prev;\n        }\n    }\n')])])]),t("p",[n._v("完整版：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    Array.prototype.myreduce=function reduce(callbackfn){\n        const o=this,\n              len=o.length;\n        let k=0,\n            accumulator=undefined,\n            kPresent=false,\n            initialValue=arguments.length>1?arguments[1]:undefined;\n        \n        if(typeof callbackfn !== 'function'){\n            throw new TypeError(callbackfn+'is not a function');\n        }\n\n        if(len === 0 && arguments.length<2){\n            throw new TypeError('Reduce of empty array with no initial value');\n        }\n\n        if(arguments.length>1){\n            accumulator=initialValue;\n        }else{\n            accumulator=o[k];\n            ++k;\n        }\n\n        while(k<len){\n            kPresent=o.hasOwnProperty(k);\n\n            if(kPresent){\n                const kValue=o[k];\n                accumulator=callbackfn.apply(undefined,[accumulator,kValue,k,o]);\n            }\n            ++k;\n        }\n\n        return accumulator;\n    }\n")])])]),t("h3",{attrs:{id:"实现trim方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现trim方法"}},[n._v("#")]),n._v(" 实现trim方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function trim(str){\n        if(str && typeof str==='string'){\n            return str.replace(/^\\s+l\\s+$/g/,'')\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现join方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现join方法"}},[n._v("#")]),n._v(" 实现join方法")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function join(arr,connector){\n        let str='';\n        for(let i=0;i<arr.length;i++){\n            if(i>0){\n                str+=connector;\n            }\n            if(arr[i] !== undefined){\n                str+=arr[i];\n            }\n        }\n        return str;\n    }\n")])])]),t("h3",{attrs:{id:"实现一个模板引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个模板引擎"}},[n._v("#")]),n._v(" 实现一个模板引擎")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function render(template, data) {\n        const reg = /\\{\\{(\\w+)\\}\\}/; \n        if (reg.test(template)) { \n            const name = reg.exec(template)[1]; \n            template = template.replace(reg, data[name]); \n            return render(template, data); \n        }\n        return template; \n    }\n")])])]),t("h3",{attrs:{id:"实现一个转驼峰方法camelcase"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个转驼峰方法camelcase"}},[n._v("#")]),n._v(" 实现一个转驼峰方法camelCase")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function camelCase(str){\n        return str.replace(/-\\w/g,function(newStr){\n            return newStr.slice(1).toUpperCase();\n        })\n    }\n")])])]),t("h3",{attrs:{id:"实现virtual-dom-diff"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现virtual-dom-diff"}},[n._v("#")]),n._v(" 实现Virtual Dom && Diff")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 实现一个utils方法库\nconst _ = exports\n\n_.setAttr = function setAttr (node, key, value) {\n  switch (key) {\n    case 'style':\n      node.style.cssText = value\n      break;\n    case 'value':\n      let tagName = node.tagName || ''\n      tagName = tagName.toLowerCase()\n      if (\n        tagName === 'input' || tagName === 'textarea'\n      ) {\n        node.value = value\n      } else {\n        // 如果节点不是 input 或者 textarea, 则使用 `setAttribute` 去设置属性\n        node.setAttribute(key, value)\n      }\n      break;\n    default:\n      node.setAttribute(key, value)\n      break;\n  }\n}\n\n_.slice = function slice (arrayLike, index) {\n  return Array.prototype.slice.call(arrayLike, index)\n}\n\n\n_.type = function type (obj) {\n  return Object.prototype.toString.call(obj).replace(/\\[object\\s|\\]/g, '')\n}\n\n_.isArray = function isArray (list) {\n  return _.type(list) === 'Array'\n}\n\n_.toArray = function toArray (listLike) {\n  if (!listLike) return []\n\n  let list = []\n  for (let i = 0, l = listLike.length; i < l; i++) {\n    list.push(listLike[i])\n  }\n  return list\n}\n\n_.isString = function isString (list) {\n  return _.type(list) === 'String'\n}\n\n_.isElementNode = function (node) {\n  return node.nodeType === 1\n}\n\n// 实现一个 Element\nimport _ from './utils'\n\n/**\n * @class Element Virtrual Dom\n * @param { String } tagName\n * @param { Object } attrs   Element's attrs, 如: { id: 'list' }\n * @param { Array <Element|String> } 可以是Element对象，也可以只是字符串，即textNode\n */\nclass Element {\n  constructor(tagName, attrs, children) {\n    // 如果只有两个参数\n    if (_.isArray(attrs)) {\n      children = attrs\n      attrs = {}\n    }\n\n    this.tagName  = tagName\n    this.attrs    = attrs || {}\n    this.children = children\n    // 设置this.key属性，为了后面list diff做准备\n    this.key = attrs\n      ? attrs.key\n      : void 0\n  }\n\n  render () {\n    let el    = document.createElement(this.tagName)\n    let attrs = this.attrs\n\n    for (let attrName in attrs) { // 设置节点的DOM属性\n      let attrValue = attrs[attrName]\n      _.setAttr(el, attrName, attrValue)\n    }\n\n    let children = this.children || []\n    children.forEach(child => {\n      let childEl = child instanceof Element\n        ? child.render() // 若子节点也是虚拟节点，递归进行构建\n        : document.createTextNode(child)  // 若是字符串，直接构建文本节点\n      el.appendChild(childEl)\n    })\n\n    return el\n  }\n}\nfunction el (tagName, attrs, children) {\n  return new Element(tagName, attrs, children)\n}\nmodule.exports = el;\n\n// 实现 diff 算法\n/**\n * Diff two list in O(N).\n * @param {Array} oldList - 原始列表\n * @param {Array} newList - 经过一些操作的得出的新列表\n * @return {Object} - {moves: <Array>}\n *                  - moves list操作记录的集合\n */\nfunction diff (oldList, newList, key) {\n  let oldMap = getKeyIndexAndFree(oldList, key)\n  let newMap = getKeyIndexAndFree(newList, key)\n\n  let newFree = newMap.free\n\n  let oldKeyIndex = oldMap.keyIndex\n  let newKeyIndex = newMap.keyIndex\n  // 记录所有move操作\n  let moves = []\n\n  // a simulate list\n  let children = []\n  let i = 0\n  let item\n  let itemKey\n  let freeIndex = 0\n\n  // newList 向 oldList 的形式靠近进行操作\n  while (i < oldList.length) {\n    item = oldList[i]\n    itemKey = getItemKey(item, key)\n    if (itemKey) {\n      if (!newKeyIndex.hasOwnProperty(itemKey)) {\n        children.push(null)\n      } else {\n        let newItemIndex = newKeyIndex[itemKey]\n        children.push(newList[newItemIndex])\n      }\n    } else {\n      let freeItem = newFree[freeIndex++]\n      children.push(freeItem || null)\n    }\n    i++\n  }\n  let simulateList = children.slice(0)\n\n  // 移除列表中一些不存在的元素\n  i = 0\n  while (i < simulateList.length) {\n    if (simulateList[i] === null) {\n      remove(i)\n      removeSimulate(i)\n    } else {\n      i++\n    }\n  }\n  // i  => new list\n  // j  => simulateList\n  let j = i = 0\n  while (i < newList.length) {\n    item = newList[i]\n    itemKey = getItemKey(item, key)\n\n    let simulateItem = simulateList[j]\n    let simulateItemKey = getItemKey(simulateItem, key)\n\n    if (simulateItem) {\n      if (itemKey === simulateItemKey) {\n        j++\n      }\n      else {\n        // 如果移除掉当前的 simulateItem 可以让 item在一个正确的位置，那么直接移除\n        let nextItemKey = getItemKey(simulateList[j + 1], key)\n        if (nextItemKey === itemKey) {\n          remove(i)\n          removeSimulate(j)\n          j++ // 移除后，当前j的值是正确的，直接自加进入下一循环\n        } else {\n          // 否则直接将item 执行 insert\n          insert(i, item)\n        }\n      }\n    // 如果是新的 item, 直接执行 inesrt\n    } else {\n      insert(i, item)\n    }\n    i++\n  }\n  // if j is not remove to the end, remove all the rest item\n  // let k = 0;\n  // while (j++ < simulateList.length) {\n  //   remove(k + i);\n  //   k++;\n  // }\n\n  // 记录remove操作\n  function remove (index) {\n    let move = {index: index, type: 0}\n    moves.push(move)\n  }\n  // 记录insert操作\n  function insert (index, item) {\n    let move = {index: index, item: item, type: 1}\n    moves.push(move)\n  }\n  // 移除simulateList中对应实际list中remove掉节点的元素\n  function removeSimulate (index) {\n    simulateList.splice(index, 1)\n  }\n  // 返回所有操作记录\n  return {\n    moves: moves,\n    children: children\n  }\n}\n/**\n * 将 list转变成  key-item keyIndex 对象的形式进行展示.\n * @param {Array} list\n * @param {String|Function} key\n */\nfunction getKeyIndexAndFree (list, key) {\n  let keyIndex = {}\n  let free = []\n  for (let i = 0, len = list.length; i < len; i++) {\n    let item = list[i]\n    let itemKey = getItemKey(item, key)\n    if (itemKey) {\n      keyIndex[itemKey] = i\n    } else {\n      free.push(item)\n    }\n  }\n\n  // 返回 key-item keyIndex\n  return {\n    keyIndex: keyIndex,\n    free: free\n  }\n}\n\nfunction getItemKey (item, key) {\n  if (!item || !key) return void 0\n  return typeof key === 'string'\n    ? item[key]\n    : key(item)\n}\n\nmodule.exports = diff\n\n// 实现 patch，解析 patch 对象\nfunction patch (rootNode, patches) {\n  let walker = { index: 0 }\n  walk(rootNode, walker, patches)\n}\n\nfunction walk (node, walker, patches) {\n  let currentPatches = patches[walker.index] // 从patches取出当前节点的差异\n\n  let len = node.childNodes\n    ? node.childNodes.length\n    : 0\n  for (let i = 0; i < len; i++) { // 深度遍历子节点\n    let child = node.childNodes[i]\n    walker.index++\n    walk(child, walker, patches)\n  }\n\n  if (currentPatches) {\n    dealPatches(node, currentPatches)  // 对当前节点进行DOM操作\n  }\n}\n\nfunction dealPatches (node, currentPatches) {\n  currentPatches.forEach(currentPatch => {\n    switch (currentPatch.type) {\n      case REPLACE:\n        let newNode = (typeof currentPatch.node === 'string')\n          ? document.createTextNode(currentPatch.node)\n          : currentPatch.node.render()\n        node.parentNode.replaceChild(newNode, node)\n        break\n      case REORDER:\n        reorderChildren(node, currentPatch.moves)\n        break\n      case ATTRS:\n        setProps(node, currentPatch.props)\n        break\n      case TEXT:\n        if (node.textContent) {\n          node.textContent = currentPatch.content\n        } else {\n          // for ie\n          node.nodeValue = currentPatch.content\n        }\n        break\n      default:\n        throw new Error('Unknown patch type ' + currentPatch.type)\n    }\n  })\n}\n\nfunction setAttrs (node, props) {\n  for (let key in props) {\n    if (props[key] === void 0) {\n      node.removeAttribute(key)\n    } else {\n      let value = props[key]\n      _.setAttr(node, key, value)\n    }\n  }\n}\nfunction reorderChildren (node, moves) {\n  let staticNodeList = _.toArray(node.childNodes)\n  let maps = {} // 存储含有key特殊字段的节点\n\n  staticNodeList.forEach(node => {\n    // 如果当前节点是ElementNode，通过maps将含有key字段的节点进行存储\n    if (_.isElementNode(node)) {\n      let key = node.getAttribute('key')\n      if (key) {\n        maps[key] = node\n      }\n    }\n  })\n\n  moves.forEach(move => {\n    let index = move.index\n    if (move.type === 0) { // remove item\n      if (staticNodeList[index] === node.childNodes[index]) { // maybe have been removed for inserting\n        node.removeChild(node.childNodes[index])\n      }\n      staticNodeList.splice(index, 1)\n    } else if (move.type === 1) { // insert item\n      let insertNode = maps[move.item.key]\n        ? maps[move.item.key] // reuse old item\n        : (typeof move.item === 'object')\n            ? move.item.render()\n            : document.createTextNode(move.item)\n      staticNodeList.splice(index, 0, insertNode)\n      node.insertBefore(insertNode, node.childNodes[index] || null)\n    }\n  })\n}\n")])])]),t("h3",{attrs:{id:"实现一个简版jquery"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个简版jquery"}},[n._v("#")]),n._v(" 实现一个简版jQuery")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    (function(window,undefined){\n        let njQuery=function(){\n            return new njQuery.prototype.init();\n        }\n        njQuery.prototype={\n            constructor:njQuery\n        }\n        njQuery.prototype.init.prototype=njQuery.prototype;\n        window.njQuery=window.$=njQuery;\n    })(window)\n")])])]),t("h2",{attrs:{id:"算法部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#算法部分"}},[n._v("#")]),n._v(" 算法部分")]),n._v(" "),t("h3",{attrs:{id:"实现冒泡排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现冒泡排序"}},[n._v("#")]),n._v(" 实现冒泡排序")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function swap(A,i,j){\n        const t=A[i];\n        A[i]=A[j];\n        A[j]=t;\n    }\n    function buble_sort(A){\n        // |---未排序---|---已排序的最大值---|\n        // 初始 |------未排序------|i|\n        for(let i=A.length;i>0;i--){\n            for(let j=1;j<i;j++){\n                if(A[j]<A[j-1]){\n                    swap(A,j,j-1)\n                }\n            }\n            // 循环不变式成立\n        }\n        return A\n    }\n")])])]),t("h3",{attrs:{id:"实现快速排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现快速排序"}},[n._v("#")]),n._v(" 实现快速排序")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // i指向最后一个小于支点的数字，j指向未确认的下一个数字 初始值 i=-1,j=0\n    function swap(A,i,j){\n        [A[i],A[j]]=[A[j],A[i]];\n    }\n\n    function divide(A,p,r){\n        const x=A[r-1];\n        let i=p-1;\n        for(let j=p;j<r-1;j++){\n            if(A[j]<x){\n                i++;\n                swap(A,i,j);\n            }\n        }\n        swap(A,i+1,r-1);\n        return i+1;\n    }\n\n    function quick_sort(A,p=0,r){\n        r = typeof r !== 'undefined' ? r : A.length;\n        if(p<r-1){\n            const q=divide(A,p,r);\n            quick_sort(A,p,q);\n            quick_sort(A,q+1,r)\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现插入排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现插入排序"}},[n._v("#")]),n._v(" 实现插入排序")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function insert_sort(A){\n        for(\n            let j=1;                    \n            j<A.length;                 \n            j++){                       \n            const key=A[j];             \n            let i=j-1;                  \n            while(i>=0 && A[i]>key){    \n                A[i+1]=A[i];            \n                i--;                    \n            }\n            A[i+1]=key                  \n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现归并排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现归并排序"}},[n._v("#")]),n._v(" 实现归并排序")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    const SENTINEL=Number.MAX_SAFE_INTEGER;\n\n    function divide(p,r){\n        return Math.floor((p+r)/2)\n    }\n\n    function conquer(A,p,q,r){\n        const A1=A.slice(p,q);\n        const A2=A.slice(q,r);\n\n        A1.push(SENTINEL);\n        A2.push(SENTINEL);\n\n        for(let k=p,i=0,j=0;k<r;k++){\n            A[k]=A1[i]<A2[i]?A1[i++]:A2[j++]\n        }\n    }\n\n    function merge_sort(A,p=0,r){\n        r=r || A.length;\n        if(r-p===1){return}\n        if(r-p===2){\n            if(A[p]>A[r-1]){\n                [A[p],A[r-1]]=[A[r-1],A[p]]\n            }\n            return\n        }\n\n        const q=divide(p,r);\n        console.log('divide:'+q);\n        merge_sort(A,p,q)\n        merge_sort(A,q,r)\n        conquer(A,p,q,r)\n    }\n")])])]),t("h3",{attrs:{id:"实现桶排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现桶排序"}},[n._v("#")]),n._v(" 实现桶排序")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function bucket_sort(A,max){\n    const a=max;\n    const B=[...Array(a+1)].map(x=>[])\n\n    const indexFunc=(value)=>{\n        const key=Math.floor(value/a);\n        if(key>a){\n            return a\n        }     \n        return key\n    }\n\n    A.forEach(value=>{\n        const idx=Math.floor(indexFunc(value))\n        if(!B[idx]){\n            throw new Error('桶脚标没有命中 index='+idx)\n        }\n        B[idx].push(value)\n    })\n\n    return [].concat(...B.map(bucket=>{\n        return bucket.sort((x,y)=>x-y)\n    }))\n}\n")])])]),t("h3",{attrs:{id:"实现二分查找"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现二分查找"}},[n._v("#")]),n._v(" 实现二分查找")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function bsearch(A,x){\n        let l=0,\n            r=A.length-1,\n            guess;\n        while(l<=r){\n            guess=Math.floor((l+r)/2);\n            if(A[guess]===x){\n                return guess;\n            }else if(A[guess]>x){\n                r=guess-1;\n            }else{\n                l=guess+1\n            }\n        }\n        return -1;\n    }\n")])])]),t("h3",{attrs:{id:"实现红黑树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现红黑树"}},[n._v("#")]),n._v(" 实现红黑树")]),n._v(" "),t("p",[n._v("BinarySearchTree")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import BinarySearchTreeNode from './BinarySearchTreeNode';\n\nexport default class BinarySearchTree {\n  /**\n   * @param {function} [nodeValueCompareFunction]\n   */\n  constructor(nodeValueCompareFunction) {\n    this.root = new BinarySearchTreeNode(null, nodeValueCompareFunction);\n\n    // Steal node comparator from the root.\n    this.nodeComparator = this.root.nodeComparator;\n  }\n\n  /**\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */\n  insert(value) {\n    return this.root.insert(value);\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  contains(value) {\n    return this.root.contains(value);\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  remove(value) {\n    return this.root.remove(value);\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    return this.root.toString();\n  }\n}\n")])])]),t("p",[n._v("RedBlackTree")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import BinarySearchTree from '../binary-search-tree/BinarySearchTree';\n\n// Possible colors of red-black tree nodes.\nconst RED_BLACK_TREE_COLORS = {\n  red: 'red',\n  black: 'black',\n};\n\n// Color property name in meta information of the nodes.\nconst COLOR_PROP_NAME = 'color';\n\nexport default class RedBlackTree extends BinarySearchTree {\n  /**\n   * @param {*} value\n   * @return {BinarySearchTreeNode}\n   */\n  insert(value) {\n    const insertedNode = super.insert(value);\n\n    // if (!this.root.left && !this.root.right) {\n    if (this.nodeComparator.equal(insertedNode, this.root)) {\n      // Make root to always be black.\n      this.makeNodeBlack(insertedNode);\n    } else {\n      // Make all newly inserted nodes to be red.\n      this.makeNodeRed(insertedNode);\n    }\n\n    // Check all conditions and balance the node.\n    this.balance(insertedNode);\n\n    return insertedNode;\n  }\n\n  /**\n   * @param {*} value\n   * @return {boolean}\n   */\n  remove(value) {\n    throw new Error(`Can't remove ${value}. Remove method is not implemented yet`);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode} node\n   */\n  balance(node) {\n    // If it is a root node then nothing to balance here.\n    if (this.nodeComparator.equal(node, this.root)) {\n      return;\n    }\n\n    // If the parent is black then done. Nothing to balance here.\n    if (this.isNodeBlack(node.parent)) {\n      return;\n    }\n\n    const grandParent = node.parent.parent;\n\n    if (node.uncle && this.isNodeRed(node.uncle)) {\n      // If node has red uncle then we need to do RECOLORING.\n\n      // Recolor parent and uncle to black.\n      this.makeNodeBlack(node.uncle);\n      this.makeNodeBlack(node.parent);\n\n      if (!this.nodeComparator.equal(grandParent, this.root)) {\n        // Recolor grand-parent to red if it is not root.\n        this.makeNodeRed(grandParent);\n      } else {\n        // If grand-parent is black root don't do anything.\n        // Since root already has two black sibling that we've just recolored.\n        return;\n      }\n\n      // Now do further checking for recolored grand-parent.\n      this.balance(grandParent);\n    } else if (!node.uncle || this.isNodeBlack(node.uncle)) {\n      // If node uncle is black or absent then we need to do ROTATIONS.\n\n      if (grandParent) {\n        // Grand parent that we will receive after rotations.\n        let newGrandParent;\n\n        if (this.nodeComparator.equal(grandParent.left, node.parent)) {\n          // Left case.\n          if (this.nodeComparator.equal(node.parent.left, node)) {\n            // Left-left case.\n            newGrandParent = this.leftLeftRotation(grandParent);\n          } else {\n            // Left-right case.\n            newGrandParent = this.leftRightRotation(grandParent);\n          }\n        } else {\n          // Right case.\n          if (this.nodeComparator.equal(node.parent.right, node)) {\n            // Right-right case.\n            newGrandParent = this.rightRightRotation(grandParent);\n          } else {\n            // Right-left case.\n            newGrandParent = this.rightLeftRotation(grandParent);\n          }\n        }\n\n        // Set newGrandParent as a root if it doesn't have parent.\n        if (newGrandParent && newGrandParent.parent === null) {\n          this.root = newGrandParent;\n\n          // Recolor root into black.\n          this.makeNodeBlack(this.root);\n        }\n\n        // Check if new grand parent don't violate red-black-tree rules.\n        this.balance(newGrandParent);\n      }\n    }\n  }\n\n  /**\n   * Left Left Case (p is left child of g and x is left child of p)\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  leftLeftRotation(grandParentNode) {\n    // Memorize the parent of grand-parent node.\n    const grandGrandParent = grandParentNode.parent;\n\n    // Check what type of sibling is our grandParentNode is (left or right).\n    let grandParentNodeIsLeft;\n    if (grandGrandParent) {\n      grandParentNodeIsLeft = this.nodeComparator.equal(grandGrandParent.left, grandParentNode);\n    }\n\n    // Memorize grandParentNode's left node.\n    const parentNode = grandParentNode.left;\n\n    // Memorize parent's right node since we're going to transfer it to\n    // grand parent's left subtree.\n    const parentRightNode = parentNode.right;\n\n    // Make grandParentNode to be right child of parentNode.\n    parentNode.setRight(grandParentNode);\n\n    // Move child's right subtree to grandParentNode's left subtree.\n    grandParentNode.setLeft(parentRightNode);\n\n    // Put parentNode node in place of grandParentNode.\n    if (grandGrandParent) {\n      if (grandParentNodeIsLeft) {\n        grandGrandParent.setLeft(parentNode);\n      } else {\n        grandGrandParent.setRight(parentNode);\n      }\n    } else {\n      // Make parent node a root\n      parentNode.parent = null;\n    }\n\n    // Swap colors of granParent and parent nodes.\n    this.swapNodeColors(parentNode, grandParentNode);\n\n    // Return new root node.\n    return parentNode;\n  }\n\n  /**\n   * Left Right Case (p is left child of g and x is right child of p)\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  leftRightRotation(grandParentNode) {\n    // Memorize left and left-right nodes.\n    const parentNode = grandParentNode.left;\n    const childNode = parentNode.right;\n\n    // We need to memorize child left node to prevent losing\n    // left child subtree. Later it will be re-assigned to\n    // parent's right sub-tree.\n    const childLeftNode = childNode.left;\n\n    // Make parentNode to be a left child of childNode node.\n    childNode.setLeft(parentNode);\n\n    // Move child's left subtree to parent's right subtree.\n    parentNode.setRight(childLeftNode);\n\n    // Put left-right node in place of left node.\n    grandParentNode.setLeft(childNode);\n\n    // Now we're ready to do left-left rotation.\n    return this.leftLeftRotation(grandParentNode);\n  }\n\n  /**\n   * Right Right Case (p is right child of g and x is right child of p)\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  rightRightRotation(grandParentNode) {\n    // Memorize the parent of grand-parent node.\n    const grandGrandParent = grandParentNode.parent;\n\n    // Check what type of sibling is our grandParentNode is (left or right).\n    let grandParentNodeIsLeft;\n    if (grandGrandParent) {\n      grandParentNodeIsLeft = this.nodeComparator.equal(grandGrandParent.left, grandParentNode);\n    }\n\n    // Memorize grandParentNode's right node.\n    const parentNode = grandParentNode.right;\n\n    // Memorize parent's left node since we're going to transfer it to\n    // grand parent's right subtree.\n    const parentLeftNode = parentNode.left;\n\n    // Make grandParentNode to be left child of parentNode.\n    parentNode.setLeft(grandParentNode);\n\n    // Transfer all left nodes from parent to right sub-tree of grandparent.\n    grandParentNode.setRight(parentLeftNode);\n\n    // Put parentNode node in place of grandParentNode.\n    if (grandGrandParent) {\n      if (grandParentNodeIsLeft) {\n        grandGrandParent.setLeft(parentNode);\n      } else {\n        grandGrandParent.setRight(parentNode);\n      }\n    } else {\n      // Make parent node a root.\n      parentNode.parent = null;\n    }\n\n    // Swap colors of granParent and parent nodes.\n    this.swapNodeColors(parentNode, grandParentNode);\n\n    // Return new root node.\n    return parentNode;\n  }\n\n  /**\n   * Right Left Case (p is right child of g and x is left child of p)\n   * @param {BinarySearchTreeNode|BinaryTreeNode} grandParentNode\n   * @return {BinarySearchTreeNode}\n   */\n  rightLeftRotation(grandParentNode) {\n    // Memorize right and right-left nodes.\n    const parentNode = grandParentNode.right;\n    const childNode = parentNode.left;\n\n    // We need to memorize child right node to prevent losing\n    // right child subtree. Later it will be re-assigned to\n    // parent's left sub-tree.\n    const childRightNode = childNode.right;\n\n    // Make parentNode to be a right child of childNode.\n    childNode.setRight(parentNode);\n\n    // Move child's right subtree to parent's left subtree.\n    parentNode.setLeft(childRightNode);\n\n    // Put childNode node in place of parentNode.\n    grandParentNode.setRight(childNode);\n\n    // Now we're ready to do right-right rotation.\n    return this.rightRightRotation(grandParentNode);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {BinarySearchTreeNode}\n   */\n  makeNodeRed(node) {\n    node.meta.set(COLOR_PROP_NAME, RED_BLACK_TREE_COLORS.red);\n\n    return node;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {BinarySearchTreeNode}\n   */\n  makeNodeBlack(node) {\n    node.meta.set(COLOR_PROP_NAME, RED_BLACK_TREE_COLORS.black);\n\n    return node;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeRed(node) {\n    return node.meta.get(COLOR_PROP_NAME) === RED_BLACK_TREE_COLORS.red;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeBlack(node) {\n    return node.meta.get(COLOR_PROP_NAME) === RED_BLACK_TREE_COLORS.black;\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} node\n   * @return {boolean}\n   */\n  isNodeColored(node) {\n    return this.isNodeRed(node) || this.isNodeBlack(node);\n  }\n\n  /**\n   * @param {BinarySearchTreeNode|BinaryTreeNode} firstNode\n   * @param {BinarySearchTreeNode|BinaryTreeNode} secondNode\n   */\n  swapNodeColors(firstNode, secondNode) {\n    const firstColor = firstNode.meta.get(COLOR_PROP_NAME);\n    const secondColor = secondNode.meta.get(COLOR_PROP_NAME);\n\n    firstNode.meta.set(COLOR_PROP_NAME, secondColor);\n    secondNode.meta.set(COLOR_PROP_NAME, firstColor);\n  }\n}\n")])])]),t("h3",{attrs:{id:"实现分段树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现分段树"}},[n._v("#")]),n._v(" 实现分段树")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import isPowerOfTwo from '../../../algorithms/math/is-power-of-two/isPowerOfTwo';\n\nexport default class SegmentTree {\n  /**\n   * @param {number[]} inputArray\n   * @param {function} operation - binary function (i.e. sum, min)\n   * @param {number} operationFallback - operation fallback value (i.e. 0 for sum, Infinity for min)\n   */\n  constructor(inputArray, operation, operationFallback) {\n    this.inputArray = inputArray;\n    this.operation = operation;\n    this.operationFallback = operationFallback;\n\n    // Init array representation of segment tree.\n    this.segmentTree = this.initSegmentTree(this.inputArray);\n\n    this.buildSegmentTree();\n  }\n\n  /**\n   * @param {number[]} inputArray\n   * @return {number[]}\n   */\n  initSegmentTree(inputArray) {\n    let segmentTreeArrayLength;\n    const inputArrayLength = inputArray.length;\n\n    if (isPowerOfTwo(inputArrayLength)) {\n      // If original array length is a power of two.\n      segmentTreeArrayLength = (2 * inputArrayLength) - 1;\n    } else {\n      // If original array length is not a power of two then we need to find\n      // next number that is a power of two and use it to calculate\n      // tree array size. This is happens because we need to fill empty children\n      // in perfect binary tree with nulls.And those nulls need extra space.\n      const currentPower = Math.floor(Math.log2(inputArrayLength));\n      const nextPower = currentPower + 1;\n      const nextPowerOfTwoNumber = 2 ** nextPower;\n      segmentTreeArrayLength = (2 * nextPowerOfTwoNumber) - 1;\n    }\n\n    return new Array(segmentTreeArrayLength).fill(null);\n  }\n\n  /**\n   * Build segment tree.\n   */\n  buildSegmentTree() {\n    const leftIndex = 0;\n    const rightIndex = this.inputArray.length - 1;\n    const position = 0;\n    this.buildTreeRecursively(leftIndex, rightIndex, position);\n  }\n\n  /**\n   * Build segment tree recursively.\n   *\n   * @param {number} leftInputIndex\n   * @param {number} rightInputIndex\n   * @param {number} position\n   */\n  buildTreeRecursively(leftInputIndex, rightInputIndex, position) {\n    // If low input index and high input index are equal that would mean\n    // the we have finished splitting and we are already came to the leaf\n    // of the segment tree. We need to copy this leaf value from input\n    // array to segment tree.\n    if (leftInputIndex === rightInputIndex) {\n      this.segmentTree[position] = this.inputArray[leftInputIndex];\n      return;\n    }\n\n    // Split input array on two halves and process them recursively.\n    const middleIndex = Math.floor((leftInputIndex + rightInputIndex) / 2);\n    // Process left half of the input array.\n    this.buildTreeRecursively(leftInputIndex, middleIndex, this.getLeftChildIndex(position));\n    // Process right half of the input array.\n    this.buildTreeRecursively(middleIndex + 1, rightInputIndex, this.getRightChildIndex(position));\n\n    // Once every tree leaf is not empty we're able to build tree bottom up using\n    // provided operation function.\n    this.segmentTree[position] = this.operation(\n      this.segmentTree[this.getLeftChildIndex(position)],\n      this.segmentTree[this.getRightChildIndex(position)],\n    );\n  }\n\n  /**\n   * Do range query on segment tree in context of this.operation function.\n   *\n   * @param {number} queryLeftIndex\n   * @param {number} queryRightIndex\n   * @return {number}\n   */\n  rangeQuery(queryLeftIndex, queryRightIndex) {\n    const leftIndex = 0;\n    const rightIndex = this.inputArray.length - 1;\n    const position = 0;\n\n    return this.rangeQueryRecursive(\n      queryLeftIndex,\n      queryRightIndex,\n      leftIndex,\n      rightIndex,\n      position,\n    );\n  }\n\n  /**\n   * Do range query on segment tree recursively in context of this.operation function.\n   *\n   * @param {number} queryLeftIndex - left index of the query\n   * @param {number} queryRightIndex - right index of the query\n   * @param {number} leftIndex - left index of input array segment\n   * @param {number} rightIndex - right index of input array segment\n   * @param {number} position - root position in binary tree\n   * @return {number}\n   */\n  rangeQueryRecursive(queryLeftIndex, queryRightIndex, leftIndex, rightIndex, position) {\n    if (queryLeftIndex <= leftIndex && queryRightIndex >= rightIndex) {\n      // Total overlap.\n      return this.segmentTree[position];\n    }\n\n    if (queryLeftIndex > rightIndex || queryRightIndex < leftIndex) {\n      // No overlap.\n      return this.operationFallback;\n    }\n\n    // Partial overlap.\n    const middleIndex = Math.floor((leftIndex + rightIndex) / 2);\n\n    const leftOperationResult = this.rangeQueryRecursive(\n      queryLeftIndex,\n      queryRightIndex,\n      leftIndex,\n      middleIndex,\n      this.getLeftChildIndex(position),\n    );\n\n    const rightOperationResult = this.rangeQueryRecursive(\n      queryLeftIndex,\n      queryRightIndex,\n      middleIndex + 1,\n      rightIndex,\n      this.getRightChildIndex(position),\n    );\n\n    return this.operation(leftOperationResult, rightOperationResult);\n  }\n\n  /**\n   * Left child index.\n   * @param {number} parentIndex\n   * @return {number}\n   */\n  getLeftChildIndex(parentIndex) {\n    return (2 * parentIndex) + 1;\n  }\n\n  /**\n   * Right child index.\n   * @param {number} parentIndex\n   * @return {number}\n   */\n  getRightChildIndex(parentIndex) {\n    return (2 * parentIndex) + 2;\n  }\n}\n")])])]),t("h3",{attrs:{id:"实现字典树"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现字典树"}},[n._v("#")]),n._v(" 实现字典树")]),n._v(" "),t("p",[n._v("TrieNode")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import HashTable from '../hash-table/HashTable';\n\nexport default class TrieNode {\n  /**\n   * @param {string} character\n   * @param {boolean} isCompleteWord\n   */\n  constructor(character, isCompleteWord = false) {\n    this.character = character;\n    this.isCompleteWord = isCompleteWord;\n    this.children = new HashTable();\n  }\n\n  /**\n   * @param {string} character\n   * @return {TrieNode}\n   */\n  getChild(character) {\n    return this.children.get(character);\n  }\n\n  /**\n   * @param {string} character\n   * @param {boolean} isCompleteWord\n   * @return {TrieNode}\n   */\n  addChild(character, isCompleteWord = false) {\n    if (!this.children.has(character)) {\n      this.children.set(character, new TrieNode(character, isCompleteWord));\n    }\n\n    const childNode = this.children.get(character);\n\n    // In cases similar to adding \"car\" after \"carpet\" we need to mark \"r\" character as complete.\n    childNode.isCompleteWord = childNode.isCompleteWord || isCompleteWord;\n\n    return childNode;\n  }\n\n  /**\n   * @param {string} character\n   * @return {TrieNode}\n   */\n  removeChild(character) {\n    const childNode = this.getChild(character);\n\n    // Delete childNode only if:\n    // - childNode has NO children,\n    // - childNode.isCompleteWord === false.\n    if (\n      childNode\n      && !childNode.isCompleteWord\n      && !childNode.hasChildren()\n    ) {\n      this.children.delete(character);\n    }\n\n    return this;\n  }\n\n  /**\n   * @param {string} character\n   * @return {boolean}\n   */\n  hasChild(character) {\n    return this.children.has(character);\n  }\n\n  /**\n   * Check whether current TrieNode has children or not.\n   * @return {boolean}\n   */\n  hasChildren() {\n    return this.children.getKeys().length !== 0;\n  }\n\n  /**\n   * @return {string[]}\n   */\n  suggestChildren() {\n    return [...this.children.getKeys()];\n  }\n\n  /**\n   * @return {string}\n   */\n  toString() {\n    let childrenAsString = this.suggestChildren().toString();\n    childrenAsString = childrenAsString ? `:${childrenAsString}` : '';\n    const isCompleteString = this.isCompleteWord ? '*' : '';\n\n    return `${this.character}${isCompleteString}${childrenAsString}`;\n  }\n}\n")])])]),t("p",[n._v("Tri")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("import TrieNode from './TrieNode';\n\n// Character that we will use for trie tree root.\nconst HEAD_CHARACTER = '*';\n\nexport default class Trie {\n  constructor() {\n    this.head = new TrieNode(HEAD_CHARACTER);\n  }\n\n  /**\n   * @param {string} word\n   * @return {Trie}\n   */\n  addWord(word) {\n    const characters = Array.from(word);\n    let currentNode = this.head;\n\n    for (let charIndex = 0; charIndex < characters.length; charIndex += 1) {\n      const isComplete = charIndex === characters.length - 1;\n      currentNode = currentNode.addChild(characters[charIndex], isComplete);\n    }\n\n    return this;\n  }\n\n  /**\n   * @param {string} word\n   * @return {Trie}\n   */\n  deleteWord(word) {\n    const depthFirstDelete = (currentNode, charIndex = 0) => {\n      if (charIndex >= word.length) {\n        // Return if we're trying to delete the character that is out of word's scope.\n        return;\n      }\n\n      const character = word[charIndex];\n      const nextNode = currentNode.getChild(character);\n\n      if (nextNode == null) {\n        // Return if we're trying to delete a word that has not been added to the Trie.\n        return;\n      }\n\n      // Go deeper.\n      depthFirstDelete(nextNode, charIndex + 1);\n\n      // Since we're going to delete a word let's un-mark its last character isCompleteWord flag.\n      if (charIndex === (word.length - 1)) {\n        nextNode.isCompleteWord = false;\n      }\n\n      // childNode is deleted only if:\n      // - childNode has NO children\n      // - childNode.isCompleteWord === false\n      currentNode.removeChild(character);\n    };\n\n    // Start depth-first deletion from the head node.\n    depthFirstDelete(this.head);\n\n    return this;\n  }\n\n  /**\n   * @param {string} word\n   * @return {string[]}\n   */\n  suggestNextCharacters(word) {\n    const lastCharacter = this.getLastCharacterNode(word);\n\n    if (!lastCharacter) {\n      return null;\n    }\n\n    return lastCharacter.suggestChildren();\n  }\n\n  /**\n   * Check if complete word exists in Trie.\n   *\n   * @param {string} word\n   * @return {boolean}\n   */\n  doesWordExist(word) {\n    const lastCharacter = this.getLastCharacterNode(word);\n\n    return !!lastCharacter && lastCharacter.isCompleteWord;\n  }\n\n  /**\n   * @param {string} word\n   * @return {TrieNode}\n   */\n  getLastCharacterNode(word) {\n    const characters = Array.from(word);\n    let currentNode = this.head;\n\n    for (let charIndex = 0; charIndex < characters.length; charIndex += 1) {\n      if (!currentNode.hasChild(characters[charIndex])) {\n        return null;\n      }\n\n      currentNode = currentNode.getChild(characters[charIndex]);\n    }\n\n    return currentNode;\n  }\n}\n")])])]),t("h3",{attrs:{id:"使用堆栈简单的符号匹配"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用堆栈简单的符号匹配"}},[n._v("#")]),n._v(" 使用堆栈简单的符号匹配")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function match(n,c){\n        return (\n            c=='[' && n==']'\n        ) ||\n        (\n            c=='(' && n==')'\n        )\n    }\n\n    function is_balance(str){\n        const [first,...others]=str;\n        const stack=[first];\n        while(others.length>0){\n            const c=stack[stack.length-1];\n            const n=others.shift();\n            if(!match(n,c)){\n                stack.push(n)\n            }else{\n                stack.pop()\n            }\n        }\n        return stack.length === 0;\n    }\n")])])]),t("h3",{attrs:{id:"实现广度优先遍历和深度优先遍历"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现广度优先遍历和深度优先遍历"}},[n._v("#")]),n._v(" 实现广度优先遍历和深度优先遍历")]),n._v(" "),t("p",[n._v("堆栈实现深度优先遍历")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function depth_first_search(node){\n        let stack=[node];\n        while(stack.length>0){\n            const item=stack.pop();\n            for(let i=item.length-1;i>0;i--){\n                stack.push(item.children[i])\n            }\n        }\n    }\n")])])]),t("p",[n._v("队列实现广度优先搜索")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function *breath_first_search(node){\n        let queue=[node];\n        while(queue.length>0){\n            const item=queue.pop();\n            yield item.tagName;\n            for(let i=item.length-1;i>0;i--){\n                queue.unshift(item.children[i])\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现n皇后问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现n皇后问题"}},[n._v("#")]),n._v(" 实现n皇后问题")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // 判断棋盘上两个皇后是否互相攻击\n    function compatible(p,q,n){\n        const [x1,y1]=[~~(p/n),p%n];\n        const [x2,y2]=[~~(q/n),q%n];\n        return (\n            x1 !== x2 && y1 !== y2 && Math.abs(x1-x2) !== Math.abs(y1-y2)\n        )\n    }\n\n    function queen(n,decisions=[]){\n        if(decisions.length===n){\n            return [decisions]\n        }\n\n        let r=[];\n        const start=decisions[decisions.length-1] || -1;\n        for(let i=start+1;i<n*n;i++){\n            if(decisions.indexOf(i)===-1){\n                if(decisions.every(j=>compatible(j,i,n))){\n                    r=r.concat(queen(n,decisions.concat(i)))\n                }\n            }\n        }\n        return r;\n    }\n")])])]),t("h3",{attrs:{id:"实现翻转链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现翻转链表"}},[n._v("#")]),n._v(" 实现翻转链表")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class List{\n        ...\n        reverse(p=this.head){\n            if(p.next){\n                this.reverse(p.next);\n                p.next.next=p;\n                p.next=null\n            }else{\n                this.head=p\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"实现最长公共子序列lcs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现最长公共子序列lcs"}},[n._v("#")]),n._v(" 实现最长公共子序列LCS")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    export default function longestCommonSubsequence(set1, set2) {\n    // Init LCS matrix.\n    const lcsMatrix = Array(set2.length + 1).fill(null).map(() => Array(set1.length + 1).fill(null));\n\n    // Fill first row with zeros.\n    for (let columnIndex = 0; columnIndex <= set1.length; columnIndex += 1) {\n        lcsMatrix[0][columnIndex] = 0;\n    }\n\n    // Fill first column with zeros.\n    for (let rowIndex = 0; rowIndex <= set2.length; rowIndex += 1) {\n        lcsMatrix[rowIndex][0] = 0;\n    }\n\n    // Fill rest of the column that correspond to each of two strings.\n    for (let rowIndex = 1; rowIndex <= set2.length; rowIndex += 1) {\n        for (let columnIndex = 1; columnIndex <= set1.length; columnIndex += 1) {\n        if (set1[columnIndex - 1] === set2[rowIndex - 1]) {\n            lcsMatrix[rowIndex][columnIndex] = lcsMatrix[rowIndex - 1][columnIndex - 1] + 1;\n        } else {\n            lcsMatrix[rowIndex][columnIndex] = Math.max(\n            lcsMatrix[rowIndex - 1][columnIndex],\n            lcsMatrix[rowIndex][columnIndex - 1],\n            );\n        }\n        }\n    }\n\n    // Calculate LCS based on LCS matrix.\n    if (!lcsMatrix[set2.length][set1.length]) {\n        // If the length of largest common string is zero then return empty string.\n        return [''];\n    }\n\n    const longestSequence = [];\n    let columnIndex = set1.length;\n    let rowIndex = set2.length;\n\n    while (columnIndex > 0 || rowIndex > 0) {\n        if (set1[columnIndex - 1] === set2[rowIndex - 1]) {\n        // Move by diagonal left-top.\n        longestSequence.unshift(set1[columnIndex - 1]);\n        columnIndex -= 1;\n        rowIndex -= 1;\n        } else if (lcsMatrix[rowIndex][columnIndex] === lcsMatrix[rowIndex][columnIndex - 1]) {\n        // Move left.\n        columnIndex -= 1;\n        } else {\n        // Move up.\n        rowIndex -= 1;\n        }\n    }\n\n    return longestSequence;\n    }\n")])])]),t("h3",{attrs:{id:"反转二叉树-阿里、头条、知乎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#反转二叉树-阿里、头条、知乎"}},[n._v("#")]),n._v(" 反转二叉树(阿里、头条、知乎)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function reverseBTree(node){\n        if(!node){\n            return\n        }\n        const tmp=node.left;\n        node.left=node.right;\n        node.right=tmp;\n        reverseBTree(node.left);\n        reverseBTree(node.right)\n    }\n")])])]),t("h3",{attrs:{id:"树的轮廓-头条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#树的轮廓-头条"}},[n._v("#")]),n._v(" 树的轮廓(头条)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    /**\n    *          1\n    *       5     9\n    *     4   2  7  3\n    *                 8\n    */\n    // 求一个二叉树从左侧看的轮廓，如图，返回[1,5,4,8]？如果求每行最大值，返回[1,9,7,8]该如何做？\n    function leftoutlineTree(node,d=0,outline=[]){\n        if(!node){\n            return\n        }\n        if(!outline[d]){\n            outline[d]=node.value\n        }\n        leftoutlineTree(node.left,d+1,outline);\n        leftoutlineTree(node.right,d+1,outline);\n        return outline;\n    }\n    function maxOfLine(node,d=0,outline=[]){\n        if(!node){\n            return\n        }\n        outline[d]=Math.max(outline[d] || -1,node.value);\n        maxOfLine(node.left,d+1,outline);\n        maxOfLine(node.right,d+1,outline);\n        return outline;\n    }\n")])])]),t("h3",{attrs:{id:"两个栈实现一个队列-滴滴"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#两个栈实现一个队列-滴滴"}},[n._v("#")]),n._v(" 两个栈实现一个队列(滴滴)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    class Queue{\n        constructor({\n            this.s1=[];\n            this.s2=[];\n        }\n        enqueue(item){\n            this.s1.push(item)\n        }\n        dequeue(){\n            while(this.s1.length>0){\n                this.s2.push(this.s1.pop());\n            }\n            if(this.s2.length>0){\n                return this.s2.pop();\n            }\n        }\n    }\n")])])]),t("h2",{attrs:{id:"综合部分"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#综合部分"}},[n._v("#")]),n._v(" 综合部分")]),n._v(" "),t("h3",{attrs:{id:"实现一个无缝轮播图"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个无缝轮播图"}},[n._v("#")]),n._v(" 实现一个无缝轮播图")]),n._v(" "),t("ul",[t("li",[n._v("html部分")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    <div class="container" id="container">\n        <div id="btn-prev" class="btn-ctrl">&lt;</div>\n        <div id="btn-next" class="btn-ctrl">&gt;</div>\n        <ul id="inner-list">\n            <li><img src="images/head1.jpeg" alt=""/></li>\n            <li><img src="images/head2.jpeg" alt=""/></li>\n            <li><img src="images/head3.jpeg" alt=""/></li>\n        </ul>\n        <ul id="dot-list">\n           \n        </ul>\n    </div>\n')])])]),t("ul",[t("li",[n._v("js部分")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("window.onload = function(){\n    var eleInners = document.getElementById('inner-list'),\n        eleDots = document.getElementById('dot-list'),\n        liImgs = eleInners.getElementsByTagName('li'),\n        liDots = eleDots.children,\n        elePrev = document.getElementById('btn-prev'),\n        eleNext = document.getElementById('btn-next'),\n        LI_WIDTH = liImgs[0].offsetWidth,\n        TIME_DURATION = 3000,\n        interval = null,\n        index = 0,\n        circle = 0;\n    eleInners.appendChild(liImgs[0].cloneNode(true));\n\n    for(var i= 0,len = liImgs.length -1;i<len;i++){\n        var li = document.createElement('li');\n        li.innerHTML = i+1;\n        eleDots.appendChild(li)\n    };\n\n    liDots[0].className = 'cur';\n\n    function animate(obj,targetPlace){\n        clearInterval(obj.timer);\n        obj.timer = setInterval(function(){\n            var speed = obj.offsetLeft > targetPlace ? -15:15;\n            var result = targetPlace - obj.offsetLeft;\n            \n            if(Math.abs(result) > Math.abs(speed)){\n                obj.style.left = obj.offsetLeft + speed +'px'\n            }else{\n                obj.style.left = targetPlace+'px';\n                clearInterval(obj.timer);\n            }\n        },10)\n    }\n\n    interval = setInterval(autoplay,3000)\n\n    function autoplay(){\n        index++;\n        \n        if(index > liImgs.length -1){\n            eleInners.style.left = 0;\n            index = 1;\n        }\n\n        animate(eleInners, -index * LI_WIDTH);\n        circle++;\n\n        if(circle >= liImgs.length -1){\n            circle = 0;\n        }\n        \n        for(var i= 0,len = liDots.length;i<len;i++){\n            liDots[i].className ='';\n        }\n\n        liDots[circle].className = 'cur';\n    }\n\n    function moveright(){\n        index--;\n\n        if(index <0){\n            eleInners.style.left = -(liImgs.length -2)* LI_WIDTH + 'px';\n            index = liImgs.length -2;\n        }\n        \n        animate(eleInners, -index * LI_WIDTH);\n        \n        circle --;\n\n        if(circle < 0){\n            circle = liImgs.length - 2;//circle回到最后一个点\n        }\n\n        for(var i= 0,len = liDots.length;i<len;i++){\n            liDots[i].className ='';\n        }\n\n        liDots[circle].className = 'cur'\n    }\n\n    eleInners.addEventListener('mouseenter',function(event){\n        clearInterval(interval)\n    });\n\n    eleInners.addEventListener('mouseleave',function(event){\n        interval = setInterval(autoplay,3000)\n    });\n\n    eleDots.addEventListener('click',function(event){\n        clearInterval(interval);\n        var target = event.target;\n        var currentTarget = event.currentTarget;\n        index = target.innerHTML - 0 - 1;\n        circle = index ;\n\n        for(var i= 0,len = liDots.length;i<len;i++){\n            liDots[i].className ='';\n        }\n\n        liDots[circle].className = 'cur';\n        animate(eleInners, - index * LI_WIDTH);\n    })\n\n    elePrev.addEventListener('click',function(event){\n        clearInterval(interval)\n        moveright();\n        interval = setInterval(autoplay,3000)\n    })\n\n    eleNext.addEventListener('click',function(event){\n        clearInterval(interval);\n        autoplay();\n        interval = setInterval(autoplay,3000);\n    })\n}\n")])])]),t("h3",{attrs:{id:"写一个幻灯片（css加分）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#写一个幻灯片（css加分）"}},[n._v("#")]),n._v(" 写一个幻灯片（css加分）")]),n._v(" "),t("ul",[t("li",[n._v("html部分：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    <div class="myDiv"></div>\n')])])]),t("ul",[t("li",[n._v("css部分：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    .myDiv{\n        width: 600px;\n        height: 400px;\n        margin: 20px auto;\n        background-size: over;\n        background-position: center;\n        animation-name:loop;\n        animation-duration: 20s;\n        animation-iteration-count: infinite;\n    }\n    @keyframes loop{\n        0% {background: url('图片1.jpg') no-repeat;}\n        25% {background: url('图片2.jpg') no-repeat;}\n        50% {background: url('图片3.jpg') no-repeat;}\n        75% {background: url('图片4.jpg') no-repeat;}\n        100% {background: url('图片5.jpg') no-repeat;}\n    }\n")])])]),t("h3",{attrs:{id:"如何用css实现瀑布流布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何用css实现瀑布流布局"}},[n._v("#")]),n._v(" 如何用css实现瀑布流布局")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html>\n<head>\n    <meta charset="utf-8">\n    <style>\n        body {\n            margin: 0;\n        }\n        .waterfall-container {\n            /*分几列*/\n            column-count: 2;\n            width: 100%;\n            /* 列间距 */\n            column-gap: 10px;\n        }\n\n        .waterfall-item {\n            break-inside: avoid;\n            width: 100%;\n            height: 100px;\n            margin-bottom: 10px;\n            background: #ddd;\n            column-gap: 0;\n            text-align: center;\n            color: #fff;\n            font-size: 40px;\n        }\n    </style>\n</head>\n<body>\n    <div class="waterfall-container">\n        <div class="waterfall-item" style="height: 100px">1</div>\n        <div class="waterfall-item" style="height: 300px">2</div>\n        <div class="waterfall-item" style="height: 400px">3</div>\n        <div class="waterfall-item" style="height: 100px">4</div>\n        <div class="waterfall-item" style="height: 300px">5</div>\n        <div class="waterfall-item" style="height: 600px">6</div>\n        <div class="waterfall-item" style="height: 400px">7</div>\n        <div class="waterfall-item" style="height: 300px">8</div>\n        <div class="waterfall-item" style="height: 700px">9</div>\n        <div class="waterfall-item" style="height: 100px">10</div>\n    </div>\n</body>\n</html>\n')])])]),t("h3",{attrs:{id:"实现三栏布局有哪些方法-分别描述一下"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现三栏布局有哪些方法-分别描述一下"}},[n._v("#")]),n._v(" 实现三栏布局有哪些方法, 分别描述一下")]),n._v(" "),t("p",[n._v("Flex 布局")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<style>\n.container{\n  display:flex;\n  justify-content: center;\n  height: 200px;\n  background: #eee;\n}\n.left {\n   width: 200px;\n   background-color: red;\n   height: 100%;\n }\n.main {\n    background-color: yellow;\n    flex: 1;\n}\n.right {\n    width: 200px;\n    background-color: green;\n}\n</style>\n<div class="container">\n  <div class="left">1</div>\n  <div class="main">2</div>\n  <div class="right">3</div>\n</div>\n')])])]),t("p",[n._v("绝对定位布局")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<style>\n.container {\n  position: relative;\n  background:#eee;\n  height:200px;\n\t}\n.main {\n  height: 200px;\n  margin: 0 120px;\n  background-color: yellow;\n\t}\n.left {\n  position: absolute;\n  width: 100px;\n  height: 200px;\n  left: 0;\n  top: 0;\n  background-color: red;\n\t}\n.right {\n  position: absolute;\n  width: 100px;\n  height: 200px;\n  background-color: green;\n  right: 0;\n  top: 0;\n}\n</style>\n\n<div class="container">\n  <div class="left">1</div>\n  <div class="main">2</div>\n  <div class="right">3</div>\n</div>\n')])])]),t("p",[n._v("双飞翼布局")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<style>\n.content {\n  float: left;\n  width: 100%;\n}\n.main {\n  height: 200px;\n  margin-left: 110px;\n  margin-right: 220px;\n  background-color: yellow;\n}\n.left {\n  float: left;\n  height: 200px;\n  width: 100px;\n  margin-left: -100%;\n  background-color: red;\n}\n.right {\n  width: 200px;\n  height: 200px;\n  float: right;\n  margin-left: -200px;\n  background-color: green;\n}\t\n\n</style>\n<div class="content">\n  <div class="main"></div>\n</div>\n<div class="left"></div>\n<div class="right"></div>\n')])])]),t("p",[n._v("圣杯布局")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<style>\n.container {\n  margin-left: 120px;\n  margin-right: 220px;\n}\n.main {\n  float: left;\n  width: 100%;\n  height: 300px;\n  background-color: yellow;\n}\n.left {\n  float: left;\n  width: 100px;\n  height: 300px;\n  margin-left: -100%;\n  position: relative;\n  left: -120px;\n  background-color: blue;\n}\n.right {\n  float: left;\n  width: 200px;\n  height: 300px;\n  margin-left: -200px;\n  position: relative;\n  right: -220px;\n  background-color: green;\n}\n</style>\n<div class="container">\n  <div class="main"></div>\n  <div class="left"></div>\n  <div class="right"></div>\n</div>\n')])])]),t("h3",{attrs:{id:"一边固定宽度一边宽度自适应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一边固定宽度一边宽度自适应"}},[n._v("#")]),n._v(" 一边固定宽度一边宽度自适应")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<div class="wrap">\n  <div class="div1"></div>\n  <div class="div2"></div>\n</div>\n\n.wrap {\n  display: flex;\n  justify-content: space-between;\n}\n.div1 {\n  min-width: 200px;\n}\n.div2 {\n  width: 100%;\n  background: #e6e6e6;\n}\nhtml,\nbody,\ndiv {\n  height: 100%;\n  margin: 0;\n}\n')])])]),t("h3",{attrs:{id:"绘制一个等腰三角形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#绘制一个等腰三角形"}},[n._v("#")]),n._v(" 绘制一个等腰三角形")]),n._v(" "),t("ul",[t("li",[n._v("html部分：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    <canvas id="canvas" width="300px" height="300px"></canvas>\n')])])]),t("ul",[t("li",[n._v("script部分：")])]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let ctx=document.getElementById('canvas').getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(0,150);\n    ctx.lineTo(150,0);\n    ctx.lineTo(300,150);\n    ctx.closePath();\n    ctx.strokeStyle='#666';\n    ctx.lineWidth=3;\n    ctx.stroke();\n")])])]),t("h3",{attrs:{id:"文本超出部分显示省略号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文本超出部分显示省略号"}},[n._v("#")]),n._v(" 文本超出部分显示省略号")]),n._v(" "),t("p",[n._v("单行")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("overflow: hidden;\ntext-overflow:ellipsis;\nwhite-space: nowrap;\n")])])]),t("p",[n._v("多行")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("display: -webkit-box;\n-webkit-box-orient: vertical;\n-webkit-line-clamp: 3; // 最多显示几行\noverflow: hidden;\n")])])]),t("h3",{attrs:{id:"利用伪元素画三角"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#利用伪元素画三角"}},[n._v("#")]),n._v(" 利用伪元素画三角")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(".info-tab {\n    position: relative;\n}\n.info-tab::after {\n    content: '';\n    border: 4px solid transparent;\n    border-top-color: #2c8ac2;\n    position: absolute;\n    top: 0;\n}\n")])])]),t("h3",{attrs:{id:"已知父级盒子的宽高，子级img宽高未知，想让img铺满父级盒子且图片不能变形"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#已知父级盒子的宽高，子级img宽高未知，想让img铺满父级盒子且图片不能变形"}},[n._v("#")]),n._v(" 已知父级盒子的宽高，子级img宽高未知，想让img铺满父级盒子且图片不能变形")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("div {\n    width: 200px;\n    height: 200px;\n}\nimg {\n    object-fit: cover;\n    width: 100%;\n    height: 100%;\n}\n")])])]),t("h3",{attrs:{id:"css3实现0-5px的细线"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css3实现0-5px的细线"}},[n._v("#")]),n._v(" css3实现0.5px的细线")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<style>\n.line {\n    position: relative;\n}\n.line:after {\n    content: "";\n    position: absolute;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 1px;\n    background-color: #000000;\n    -webkit-transform: scaleY(.5);\n    transform: scaleY(.5);\n}\n</style>\n\n<div class="line"></div>\n')])])]),t("h3",{attrs:{id:"用javascript实现斐波那契数列函数，返回第n个斐波那切数。fib-1-1-fib-2-1-fib-3-2等"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用javascript实现斐波那契数列函数，返回第n个斐波那切数。fib-1-1-fib-2-1-fib-3-2等"}},[n._v("#")]),n._v(" 用JavaScript实现斐波那契数列函数，返回第n个斐波那切数。fib(1)=1,fib(2)=1,fib(3)=2等")]),n._v(" "),t("p",[n._v("递归")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function fib(n) {\n        return fib(n) = n > 2 ?\n            fib(n - 1) + fib(n - 2) :\n            1\n    }\n")])])]),t("p",[n._v("尾递归")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function fib(n,a=1,b=1){\n        if(n<=1) return b;\n        return fib(n-1,b,a+b);\n    }\n")])])]),t("p",[n._v("非递归 动态规划")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function fib(n){\n        let a=1,\n            b=1;\n        for(let i=2;i<n;i++){\n            const t=b;\n            b=a+b;\n            a=t\n        }\n        return b\n    }\n")])])]),t("p",[n._v("非递归 生成器")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function *fib(){\n        let a=1,b=1;\n        yield a;\n        yield b;\n        while(true){\n            const t=b;\n            b=a+b;\n            a=t;\n            yield b\n        }\n    }\n")])])]),t("p",[n._v("递归 reduce流")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function fib(n){\n        return Array(n).fill().reduce(([a,b],_)=>{\n            return [b,a+b]\n        },[0,1])[0]\n    }\n")])])]),t("p",[n._v("非递归 堆栈")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function fib(n){\n        let stack=[n]\n        while(stack.length){\n            const item=stack.pop();\n            if(item===1 || item===2){\n                stack.push(1)\n            }else{\n                stack.push(item-1);\n                stack.push(item-2);\n            }\n        }\n    }\n")])])]),t("h3",{attrs:{id:"判断一个数是否是素数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判断一个数是否是素数"}},[n._v("#")]),n._v(" 判断一个数是否是素数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function is_prime(n){\n        if(n<=1){return false}\n        const N=Math.floor(Math.sqrt(n));\n        let is_prime=true\n        for(let i=2;i<=N;i++){\n            if(n%i===0){\n                is_prime=false;\n                break;\n            }\n        }\n        return is_prime;\n    }\n")])])]),t("h3",{attrs:{id:"获取n以内所有的素数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#获取n以内所有的素数"}},[n._v("#")]),n._v(" 获取n以内所有的素数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function *sieve_primes(n){\n        let numbers=Array.from({length:n-2},(_,i)=>i+2);\n        let p=null;\n        while((p=numbers.shift())){\n            yield p;\n            numbers=numbers.filter(t=>t%p!==0)\n        }\n    }\n")])])]),t("h3",{attrs:{id:"删除数组arr第一个元素。不要直接修改数组arr，结果返回新的数组。"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#删除数组arr第一个元素。不要直接修改数组arr，结果返回新的数组。"}},[n._v("#")]),n._v(" 删除数组arr第一个元素。不要直接修改数组arr，结果返回新的数组。")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function insert(arr, item, index) {\n        return arr.slice(0,index).concat(item,arr.slice(index));\n    }\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function insert(arr, item, index) {\n        var newArr=arr.concat();\n        newArr.splice(index,0,item);\n        return newArr;\n    }\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function insert(arr, item, index) {\n        var newArr=arr.slice(0);\n        newArr.splice(index,0,item);\n        return newArr;\n    }\n")])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function insert(arr, item, index) {\n        var newArr=[];\n        [].push.apply(newArr, arr);\n        newArr.splice(index,0,item);\n        return newArr;\n    }\n")])])]),t("h3",{attrs:{id:"实现一个打点计时器，要求：-1-从start到end（包含start和end），每隔100毫秒console-log一个数字，每次数字增幅为1；-2-返回的对象中需要包含一个cancel方法，用于停止定时操作；-3-第一个数需要立即输出"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个打点计时器，要求：-1-从start到end（包含start和end），每隔100毫秒console-log一个数字，每次数字增幅为1；-2-返回的对象中需要包含一个cancel方法，用于停止定时操作；-3-第一个数需要立即输出"}},[n._v("#")]),n._v(" 实现一个打点计时器，要求：(1)从start到end（包含start和end），每隔100毫秒console.log一个数字，每次数字增幅为1；(2)返回的对象中需要包含一个cancel方法，用于停止定时操作；(3)第一个数需要立即输出")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function count(start, end) {\n        console.log(start)\n        var timer = setInterval(\n            function(){\n                if(start<end) console.log(start+=1);\n            },100)\n        return {cancel:function(){clearInterval(timer)}}\n    }\n")])])]),t("h3",{attrs:{id:"sort方法将数组内的对象进行排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sort方法将数组内的对象进行排序"}},[n._v("#")]),n._v(" sort方法将数组内的对象进行排序")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function compare(propertyName, index) {\n        return function(a, b) {\n            let value1 = a[propertyName];\n            let value2 = b[propertyName];\n            if (vm.reverse[index]) {\n                return value2 - value1;\n            } else {\n                return value1 - value2;\n            }\n        };\n    }\n")])])]),t("h3",{attrs:{id:"查找字符串中出现最多的字符和个数-2"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查找字符串中出现最多的字符和个数-2"}},[n._v("#")]),n._v(" 查找字符串中出现最多的字符和个数")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    let num=0;\n    let char='';\n\n    let str = str.split('').sort().join('');\n    str.replace(/(\\w)\\1+/g,($0,$1) => {\n        if(num < $0.length){\n            num = $0.length;\n            char = $1;        \n        }\n    });\n    console.log(`字符最多的是${char}，出现了${num}次`);\n")])])]),t("h3",{attrs:{id:"实现一个方法，随机打乱一个数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个方法，随机打乱一个数组"}},[n._v("#")]),n._v(" 实现一个方法，随机打乱一个数组")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function shuffle_simple(arr){\n        return arr.sort(()=>Math.random()- .5)\n    }\n")])])]),t("p",[n._v("或")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function fisher_yates_shuffle(arr){\n        for(let i=0;i<arr.length-1;i++){\n            const j=i+Math.floor(Math.random()*(arr.length-1));\n            [arr[i],[arr[j]]]=[arr[j],arr[i]]\n        }\n        return arr\n    }\n")])])]),t("p",[n._v("或")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function shuffle(arr){\n        const m=[];\n        const N=arr.length*arr.length*arr.length;\n        for(let i=0;i<arr.length-1;i++){\n            m[i]=Math.floor(Math.random(1,N))\n        }\n        return arr.sort((i,j)=>m[i]-m[j])\n    }\n")])])]),t("h3",{attrs:{id:"用jq实现一个类似百度搜索框的模糊查询"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用jq实现一个类似百度搜索框的模糊查询"}},[n._v("#")]),n._v(" 用jq实现一个类似百度搜索框的模糊查询")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <title>Document</title>\n    <style>\n        #div_main {\n            margin: 0 auto;\n            width: 300px;\n            height: 400px;\n            border: 1px solid black;\n            margin-top: 50px;\n        }\n\n        #div_txt {\n            position: relative;\n            width: 200px;\n            margin: 0 auto;\n            margin-top: 40px;\n        }\n\n        #txt1 {\n            width: 99%;\n        }\n\n        #div_items {\n            position: relative;\n            width: 100%;\n            height: 200px;\n            border: 1px solid #66afe9;\n            border-top: 0px;\n            overflow: auto;\n            display: none;\n        }\n\n        .div_item {\n            width: 100%;\n            height: 20px;\n            margin-top: 1px;\n            font-size: 13px;\n            line-height: 20px;\n        }\n    </style>\n</head>\n<body>\n    <div id="div_main">\n        \x3c!--表单的autocomplete="off"属性设置可以阻止浏览器默认的提示框--\x3e\n        <form autocomplete="off">\n            <div id="div_txt">\n                \x3c!--要模糊匹配的文本框--\x3e\n                <input type="text" id="txt1" />\n\n                \x3c!--模糊匹配窗口--\x3e\n                <div id="div_items">\n                    <div class="div_item">周杰伦</div>\n                    <div class="div_item">周杰</div>\n                    <div class="div_item">林俊杰</div>\n                    <div class="div_item">林宥嘉</div>\n                    <div class="div_item">林妙可</div>\n                    <div class="div_item">唐嫣</div>\n                    <div class="div_item">唐家三少</div>\n                    <div class="div_item">唐朝盛世</div>\n                    <div class="div_item">奥迪A4L</div>\n                    <div class="div_item">奥迪A6L</div>\n                    <div class="div_item">奥迪A8L</div>\n                    <div class="div_item">奥迪R8</div>\n                    <div class="div_item">宝马GT</div>\n                </div>\n            </div>\n        </form>\n    </div>\n\n    <script src="./jquery.min.js"><\/script>\n    <script type="text/javascript">\n\n        //弹出列表框\n        $("#txt1").click(function () {\n            $("#div_items").css(\'display\', \'block\');\n            return false;\n        });\n\n        //隐藏列表框\n        $("body").click(function () {\n            $("#div_items").css(\'display\', \'none\');\n        });\n\n        //移入移出效果\n        $(".div_item").hover(function () {\n            $(this).css(\'background-color\', \'#1C86EE\').css(\'color\', \'white\');\n        }, function () {\n            $(this).css(\'background-color\', \'white\').css(\'color\', \'black\');\n        });\n\n        //文本框输入\n        $("#txt1").keyup(function () {\n            $("#div_items").css(\'display\', \'block\');//只要输入就显示列表框\n\n            if ($("#txt1").val().length <= 0) {\n                $(".div_item").css(\'display\', \'block\');//如果什么都没填，跳出，保持全部显示状态\n                return;\n            }\n\n            $(".div_item").css(\'display\', \'none\');//如果填了，先将所有的选项隐藏\n\n            for (var i = 0; i < $(".div_item").length; i++) {\n                //模糊匹配，将所有匹配项显示\n                if ($(".div_item").eq(i).text().substr(0, $("#txt1").val().length) == $("#txt1").val()) {\n                    $(".div_item").eq(i).css(\'display\', \'block\');\n                }\n            }\n        });\n\n        //项点击\n        $(".div_item").click(function () {\n            $("#txt1").val($(this).text());\n        });\n\n    <\/script>\n</body>\n\n</html>\n')])])]),t("h3",{attrs:{id:"实现页面整屏切换"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现页面整屏切换"}},[n._v("#")]),n._v(" 实现页面整屏切换")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html>\n<head lang="ch">\n    <meta charset="UTF-8">\n    <meta name=”viewport” content="width=device-width, user-scalable=no, initial-scale=1.0">\n    <title></title>\n    <style>\n        body, html{\n            padding: 0;\n            margin: 0;\n        }\n \n        body, html {\n            height: 100%;\n            overflow: hidden;\n        }\n \n        #container, .section {\n            height: 100%;\n        }\n \n        .section {\n            background-color: #000;\n            background-size: cover;\n            background-position: 50% 50%;\n        }\n \n        #section0 {\n            background-color: #83af9b;\n        }\n \n        #section1 {\n            background-color: #764d39;\n        }\n \n        #section2 {\n            background-color: #ff9000;\n        }\n \n        #section3 {\n            background-color: #380d31;\n        }\n \n    </style>\n</head>\n<body>\n<div id="container">\n    <div class="section" id="section0"></div>\n    <div class="section" id="section1"></div>\n    <div class="section" id="section2"></div>\n    <div class="section" id="section3"></div>\n</div>\n \n<script src="http://code.jquery.com/jquery-latest.js"><\/script>\n<script>\n    var curIndex = 0;\n    var container = $("#container");\n    var sumCount = $(".section").length;\n    var $window = $(window);\n    var duration = 500;\n    //时间控制\n    var aniTime = 0;\n \n    var scrollFunc = function (e) {\n        //如果动画还没执行完，则return\n        if(new Date().getTime() < aniTime + duration){\n            return;\n        }\n        e = e || window.event;\n        var t = 0;\n        if (e.wheelDelta) {//IE/Opera/Chrome\n            t = e.wheelDelta;\n            if (t > 0 && curIndex > 0) {\n                //上滚动\n                movePrev();\n            } else if (t < 0 && curIndex < sumCount - 1) {\n                //下滚动\n                moveNext();\n            }\n        } else if (e.detail) {//Firefox\n            t = e.detail;\n            if (t < 0 && curIndex > 0) {\n                //上滚动\n                movePrev();\n            } else if (t > 0 && curIndex < sumCount - 1) {\n                //下滚动\n                moveNext();\n            }\n        }\n    };\n \n    function moveNext(){\n        //获取动画开始时的时间\n        aniTime = new Date().getTime();\n        container.css("transform", "translate3D(0, -" + (++curIndex) * $window.height() + "px, 0)");\n    }\n \n    function movePrev(){\n        //获取动画开始时的时间\n        aniTime = new Date().getTime();\n        container.css("transform", "translate3D(0, -" + (--curIndex) * $window.height() + "px, 0)");\n    }\n \n    function init(){\n        /*注册事件*/\n        if (document.addEventListener) {\n            document.addEventListener(\'DOMMouseScroll\', scrollFunc, false);\n        }//W3C\n        window.onmousewheel = document.onmousewheel = scrollFunc;//IE/Opera/Chrome\n \n        container.css({\n            "transition": "all 0.5s",\n            "-moz-transition": "all 0.5s",\n            "-webkit-transition": "all 0.5s"\n        });\n    }\n \n    init();\n<\/script>\n</body>\n</html>\n')])])]),t("h3",{attrs:{id:"实现一个瀑布流效果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个瀑布流效果"}},[n._v("#")]),n._v(" 实现一个瀑布流效果")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('var left_top=$(".left_div>div:last-child").offset().top\n var right_top=$(".right_div>div:last-child").offset().top\n        if(left_top<=right_top){\n               $(".left_div").append(img_info)\n           }else{\n               $(".right_div").append(img_info)\n           }\n')])])]),t("h3",{attrs:{id:"实现一个树组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个树组件"}},[n._v("#")]),n._v(" 实现一个树组件")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h3",{attrs:{id:"实现一个购物车动效"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一个购物车动效"}},[n._v("#")]),n._v(" 实现一个购物车动效")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])]),t("h3",{attrs:{id:"实现函数找到dom的绝对位置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现函数找到dom的绝对位置"}},[n._v("#")]),n._v(" 实现函数找到DOM的绝对位置")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function get_layout(ele){\n        const layout={\n            width:ele.offsetWidth,\n            height:ele.offsetHeight,\n            left:ele.offsetLeft,\n            top:ele.offsetTop\n        }\n        if(ele.offsetParent){\n            const parentLayout=get_layout(ele.offsetParent);\n            layout.left+=parentLayout.left;\n            layout.top+=parentLayout.top;\n        }\n        return layout;\n    }\n")])])]),t("h3",{attrs:{id:"子数组整除：写一个函数，给定一个数组，判断数组中某一项，或者任意多项的和，是否被另一个整数整除。比如：solve-3-5-8-13-true-solve-3-9-15-false-solve-7-8-2-7-true-solve-1-2-3-6-true"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#子数组整除：写一个函数，给定一个数组，判断数组中某一项，或者任意多项的和，是否被另一个整数整除。比如：solve-3-5-8-13-true-solve-3-9-15-false-solve-7-8-2-7-true-solve-1-2-3-6-true"}},[n._v("#")]),n._v(" 子数组整除：写一个函数，给定一个数组，判断数组中某一项，或者任意多项的和，是否被另一个整数整除。比如：solve([3,5,8],13)=true;solve([3,9],15)=false;solve([7,8,2],7)=true;solve([1,2,3],6)=true")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function solve(arr,N){\n        const s=new Set([arr.shift()%N]);\n        while(arr.length>0){\n            const ak=arr.shift();\n            const items=[...s];\n            items.forEach(x=>{\n                s.add((x+ak)%N);\n            })\n            s.add(ak)\n        }\n        return s.has(0);\n    }\n")])])]),t("h3",{attrs:{id:"实现一段脚本，使得点击对应链接alert出响应的编号"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#实现一段脚本，使得点击对应链接alert出响应的编号"}},[n._v("#")]),n._v(" 实现一段脚本，使得点击对应链接alert出响应的编号")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('    <meta http-equiv="Content-Type" content="text/html;charset=utf-8" />\n    <body>\n        <a href="#">第一个链接</a></br>\n        <a href="#">第二个链接</a></br>\n        <a href="#">第三个链接</a></br>\n        <a href="#">第四个链接</a></br>\n    </body>\n')])])]),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    <script>\n        let aGroup=document.getElementsByTagName('a');\n        let i=0;\n        for(let a of aGroup){\n            a.onclick=(function(i){\n                return function(){\n                    alert(i);\n                }\n            })(++i)\n        }\n    <\/script>\n")])])]),t("h3",{attrs:{id:"用纯js实现，点击一个列表时，输出对应的索引？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#用纯js实现，点击一个列表时，输出对应的索引？"}},[n._v("#")]),n._v(" 用纯JS实现，点击一个列表时，输出对应的索引？")]),n._v(" "),t("p",[n._v("方式一：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("for(let i = 0, \n    len = lis.length; \n    i < len; i++){\n    lis[i].addEventListener('click',\n      function () {        \n        console.log(i);\n      }, false);\n}\n")])])]),t("p",[n._v("方式二：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("for(var i = 0, \n    len = lis.length; \n    i < len; i++) {\n    (function (i) {\n        lis[i].addEventListener\n        ('click', function () {            \n             console.log(i);\n        }, false);\n    })(i)\n}\n")])])]),t("p",[n._v("方式三：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let ul = document.querySelector('ul');\nlet lis = document.querySelectorAll('ul li');\nul.addEventListener('click', \nfunction (e) {    \n  let target = e.target;    \n  if(target.nodeName.toLowerCase() === 'li') {        \n      console.log([].indexOf.call(lis, target));\n    }\n}, false);\n")])])]),t("h3",{attrs:{id:"点击按钮发出ajax请求，如何防止用户在此请求方式返回之前再次点击"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#点击按钮发出ajax请求，如何防止用户在此请求方式返回之前再次点击"}},[n._v("#")]),n._v(" 点击按钮发出ajax请求，如何防止用户在此请求方式返回之前再次点击?")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("// 点击提交按钮的时候，\n// 把这个提交这个处理函数给解绑掉，\n// 请求完成的时候在绑定回来\nfunction clickHandler(){\n  $(this).unbind('click', clickHandler);\n    $.ajax({        \n       url : 'url',        \n       dataType : 'json',\n       type : 'post',\n       success : function (data) {\n         if (data.success) { \n          //提交成功做跳转处理\n         } else { \n          //处理失败，重新绑定点击事件\n          $(self).click(clickHandler);\n         }\n        }\n  });\n}\n                \n$('#itlike').click(clickHandler);\n                \n// 可以点击后让按钮不可用,\n// 如果提交失败可以再次设置为可用\n// 1.让按钮不可用\n$(\"#itlike\").attr(\"disabled\",\"disabled\");\n$.ajax({\n    url : 'url',\n    dataType : 'json',    \n    type : 'post',    \n    success : function (data) {\n       if (data.success) {\n       // 提交成功做跳转处理\n       } else {            \n       // 处理失败，重新绑定点击事件\n       // 2. 让按钮可用\n       $(\"#itlike\").removeAttr(\"disabled\");\n      }\n    }\n});\n")])])]),t("h3",{attrs:{id:"ios-safari-如何阻止-橡皮筋效果-？"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ios-safari-如何阻止-橡皮筋效果-？"}},[n._v("#")]),n._v(" iOS safari 如何阻止“橡皮筋效果”？")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("$(document).ready(function(){\n      var stopScrolling = function(event) {\n          event.preventDefault();\n      }\n      document.addEventListener('touchstart', stopScrolling, false);\n      document.addEventListener('touchmove', stopScrolling, false);\n  });\n")])])]),t("h3",{attrs:{id:"n个数字和为m的问题-今日头条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#n个数字和为m的问题-今日头条"}},[n._v("#")]),n._v(" N个数字和为M的问题(今日头条)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // 给定一个不重复的正整数集合，从中取N个数字，使得它们的和为M，写一个函数，求这N个数字。如有多个，只需要返回一个\n    function sumN(A,n,m,i=0,decisions=[]){\n        if(m===0){\n            return decisions\n        }\n        if(i===A.length || n===0 || m<0){\n            return null\n        }\n        return sumN(A,n-1,m-A[i],i+1,decisions.concat(A[i])) || sumN(A,n,m,i+1,decisions)\n    }\n")])])]),t("p",[n._v("优化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function sumN(A,n,m){\n        // 最终结果\n        let r=null;\n\n        // 决策\n        const decisions=[];\n\n        function inner(i=0,n,m){\n            // 如果已有结果，终止递归\n            if(r){return}\n            // 如果m=0，找到一个解\n            if(m===0){\n                r=decisions.slice();\n                return\n            }\n            // 没有找到解的情况\n            if(i===A.length || n===0 || m<0){\n                return\n            }\n            decisions.push(A[i]);\n            inner(i+1,n-1,m-A[i]);\n            decisions.pop(A[i]);\n            inner(i+1,n,m)\n        }\n        inner(0,n,m);\n        return r;\n    }\n")])])]),t("p",[n._v("利用位运算")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function sumByBinaryCode(A,code){\n        const max=1 << A.length;\n        const p=[];\n        let sum=0;\n        for(let i=0;i<A.length;i++){\n            if(code & (1<<i)){\n                sum+=A[i];\n                p.push(A[i])\n            }\n        }\n        return {sum,p}\n    }\n    function sumN(A,n,m){\n        const max=1 << A.length;\n        for(let i=0;i<max;i++){\n            const {sum,p}=sumByBinaryCode(A,i);\n            if(sum===m){\n                return p\n            }\n        }\n        return null;\n    }\n")])])]),t("h3",{attrs:{id:"火车车厢重排问题-今日头条"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#火车车厢重排问题-今日头条"}},[n._v("#")]),n._v(" 火车车厢重排问题(今日头条)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // 给定一列火车，利用左侧的环状铁轨对火车车厢进行重新排序，给定初始顺序和排序后的顺序，写一个函数，判断这样是否可行？\n    function isTrans(o,t){\n        const q=[];\n        for(let x of t){\n            if(q[q.length-1]===x){\n                q.pop()\n            }\n            let y=null;\n            while(o.length >0 && (y=o.shift()) !== x){\n                q.unshift(y);\n            }\n        }\n        return q.length === 0;\n    }\n")])])]),t("p",[n._v("优化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function isTrans(o,t){\n        const q=new Queue();\n        for(let x of t){\n            if(q.peek()===x){\n                q.dequeue()\n            }\n            let y=null;\n            while(o.size()>0 && (y=o.dequeue()) !== x){\n                q.enqueue(y)\n            }\n        }\n        return q.size()===0\n    }\n")])])]),t("h3",{attrs:{id:"数网格中的路径-阿里、美团"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数网格中的路径-阿里、美团"}},[n._v("#")]),n._v(" 数网格中的路径(阿里、美团)")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    // 小虫子从A到B，只能沿着网格走，每次只能向右或向下。求有多少种走法？\n    function f(x,y){\n        if(x>0 && y>0){\n            return f(x-1,y)+f(x,y-1)\n        }else if(x>0){\n            return f(x-1,y)\n        }else if(y>0){\n            return f(x,y-1)\n        }else{\n            return 1\n        }\n    }\n")])])]),t("p",[n._v("优化")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("    function f(x,y,dp=[]){\n        if(!dp[y]){\n            dp[y]=[]\n        }\n        if(dp[y][x] !== undefined){\n            return dp[y][x]\n        }\n        if(x>0 && y>0){\n            dp[y][x]= f(x-1,y,dp)+f(x,y-1,dp)\n        }else if(x>0){\n            dp[y][x]= f(x-1,y,dp)\n        }else if(y>0){\n            dp[y][x]= f(x,y-1,dp)\n        }else{\n            dp[y][x]= 1\n        }\n        return dp[y][x]\n    }\n")])])]),t("h3",{attrs:{id:"使用object-defineproperty-模拟实现vue的绑定原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#使用object-defineproperty-模拟实现vue的绑定原理"}},[n._v("#")]),n._v(" 使用Object.defineProperty()模拟实现Vue的绑定原理")]),n._v(" "),t("p",[n._v("题目：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('<!DOCTYPE html>\n<html lang="en">\n<head>\n    <meta charset="UTF-8">\n    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n    <meta http-equiv="X-UA-Compatible" content="ie=edge">\n    <title>Document</title>\n</head>\n<body>\n    <h1>Welcome</h1>\n    <h2>积分:<span>{{score}}</span></h2>\n    <h1>用户名:<span>{{uname}}</span></h1>\n    <h2>积分:<span>{{score}}</span></h2>\n    <script>\n        var data={\n            uname:\'dingding\',\n            score:3000\n        }\n    <\/script>\n</body>\n</html>\n')])])]),t("p",[n._v("答案：")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code")])])])}),[],!1,null,null,null);e.default=a.exports}}]);